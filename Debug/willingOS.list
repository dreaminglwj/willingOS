
willingOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000236c  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800249c  0800249c  0001249c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025b8  080025b8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080025b8  080025b8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025b8  080025b8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025b8  080025b8  000125b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025bc  080025bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080025c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000068  08002628  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08002628  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003f17  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001781  00000000  00000000  00023feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000640  00000000  00000000  00025770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000470  00000000  00000000  00025db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010216  00000000  00000000  00026220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000093ad  00000000  00000000  00036436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00055f20  00000000  00000000  0003f7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e6c  00000000  00000000  00095704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00097570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08002484 	.word	0x08002484

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08002484 	.word	0x08002484

08000170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000174:	4b15      	ldr	r3, [pc, #84]	; (80001cc <SystemInit+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a14      	ldr	r2, [pc, #80]	; (80001cc <SystemInit+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <SystemInit+0x5c>)
 8000182:	685a      	ldr	r2, [r3, #4]
 8000184:	4911      	ldr	r1, [pc, #68]	; (80001cc <SystemInit+0x5c>)
 8000186:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <SystemInit+0x60>)
 8000188:	4013      	ands	r3, r2
 800018a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800018c:	4b0f      	ldr	r3, [pc, #60]	; (80001cc <SystemInit+0x5c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a0e      	ldr	r2, [pc, #56]	; (80001cc <SystemInit+0x5c>)
 8000192:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800019a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800019c:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <SystemInit+0x5c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a0a      	ldr	r2, [pc, #40]	; (80001cc <SystemInit+0x5c>)
 80001a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80001a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80001a8:	4b08      	ldr	r3, [pc, #32]	; (80001cc <SystemInit+0x5c>)
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	4a07      	ldr	r2, [pc, #28]	; (80001cc <SystemInit+0x5c>)
 80001ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80001b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80001b4:	4b05      	ldr	r3, [pc, #20]	; (80001cc <SystemInit+0x5c>)
 80001b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001ba:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80001bc:	f000 f80c 	bl	80001d8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <SystemInit+0x64>)
 80001c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80001c8:	bf00      	nop
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	40021000 	.word	0x40021000
 80001d0:	f8ff0000 	.word	0xf8ff0000
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80001dc:	f000 f802 	bl	80001e4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80001f2:	4b3a      	ldr	r3, [pc, #232]	; (80002dc <SetSysClockTo72+0xf8>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a39      	ldr	r2, [pc, #228]	; (80002dc <SetSysClockTo72+0xf8>)
 80001f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80001fe:	4b37      	ldr	r3, [pc, #220]	; (80002dc <SetSysClockTo72+0xf8>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000206:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3301      	adds	r3, #1
 800020c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d103      	bne.n	800021c <SetSysClockTo72+0x38>
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800021a:	d1f0      	bne.n	80001fe <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800021c:	4b2f      	ldr	r3, [pc, #188]	; (80002dc <SetSysClockTo72+0xf8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000224:	2b00      	cmp	r3, #0
 8000226:	d002      	beq.n	800022e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000228:	2301      	movs	r3, #1
 800022a:	603b      	str	r3, [r7, #0]
 800022c:	e001      	b.n	8000232 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800022e:	2300      	movs	r3, #0
 8000230:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d14b      	bne.n	80002d0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000238:	4b29      	ldr	r3, [pc, #164]	; (80002e0 <SetSysClockTo72+0xfc>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a28      	ldr	r2, [pc, #160]	; (80002e0 <SetSysClockTo72+0xfc>)
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <SetSysClockTo72+0xfc>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a25      	ldr	r2, [pc, #148]	; (80002e0 <SetSysClockTo72+0xfc>)
 800024a:	f023 0303 	bic.w	r3, r3, #3
 800024e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <SetSysClockTo72+0xfc>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a22      	ldr	r2, [pc, #136]	; (80002e0 <SetSysClockTo72+0xfc>)
 8000256:	f043 0302 	orr.w	r3, r3, #2
 800025a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800025c:	4b1f      	ldr	r3, [pc, #124]	; (80002dc <SetSysClockTo72+0xf8>)
 800025e:	4a1f      	ldr	r2, [pc, #124]	; (80002dc <SetSysClockTo72+0xf8>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000264:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <SetSysClockTo72+0xf8>)
 8000266:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <SetSysClockTo72+0xf8>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <SetSysClockTo72+0xf8>)
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	4a1a      	ldr	r2, [pc, #104]	; (80002dc <SetSysClockTo72+0xf8>)
 8000272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000276:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <SetSysClockTo72+0xf8>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a17      	ldr	r2, [pc, #92]	; (80002dc <SetSysClockTo72+0xf8>)
 800027e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000282:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <SetSysClockTo72+0xf8>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a14      	ldr	r2, [pc, #80]	; (80002dc <SetSysClockTo72+0xf8>)
 800028a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800028e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <SetSysClockTo72+0xf8>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a11      	ldr	r2, [pc, #68]	; (80002dc <SetSysClockTo72+0xf8>)
 8000296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800029a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800029c:	bf00      	nop
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <SetSysClockTo72+0xf8>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f9      	beq.n	800029e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <SetSysClockTo72+0xf8>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <SetSysClockTo72+0xf8>)
 80002b0:	f023 0303 	bic.w	r3, r3, #3
 80002b4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <SetSysClockTo72+0xf8>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	4a08      	ldr	r2, [pc, #32]	; (80002dc <SetSysClockTo72+0xf8>)
 80002bc:	f043 0302 	orr.w	r3, r3, #2
 80002c0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80002c2:	bf00      	nop
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <SetSysClockTo72+0xf8>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	f003 030c 	and.w	r3, r3, #12
 80002cc:	2b08      	cmp	r3, #8
 80002ce:	d1f9      	bne.n	80002c4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40022000 	.word	0x40022000

080002e4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b089      	sub	sp, #36	; 0x24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61fb      	str	r3, [r7, #28]
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	78db      	ldrb	r3, [r3, #3]
 800030a:	f003 030f 	and.w	r3, r3, #15
 800030e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	78db      	ldrb	r3, [r3, #3]
 8000314:	f003 0310 	and.w	r3, r3, #16
 8000318:	2b00      	cmp	r3, #0
 800031a:	d005      	beq.n	8000328 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	789b      	ldrb	r3, [r3, #2]
 8000320:	461a      	mov	r2, r3
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	4313      	orrs	r3, r2
 8000326:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d044      	beq.n	80003bc <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000338:	2300      	movs	r3, #0
 800033a:	61bb      	str	r3, [r7, #24]
 800033c:	e038      	b.n	80003b0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800033e:	2201      	movs	r2, #1
 8000340:	69bb      	ldr	r3, [r7, #24]
 8000342:	fa02 f303 	lsl.w	r3, r2, r3
 8000346:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	461a      	mov	r2, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	4013      	ands	r3, r2
 8000352:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000354:	693a      	ldr	r2, [r7, #16]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	429a      	cmp	r2, r3
 800035a:	d126      	bne.n	80003aa <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800035c:	69bb      	ldr	r3, [r7, #24]
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000362:	220f      	movs	r2, #15
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	fa02 f303 	lsl.w	r3, r2, r3
 800036a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	43db      	mvns	r3, r3
 8000370:	697a      	ldr	r2, [r7, #20]
 8000372:	4013      	ands	r3, r2
 8000374:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000376:	69fa      	ldr	r2, [r7, #28]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	fa02 f303 	lsl.w	r3, r2, r3
 800037e:	697a      	ldr	r2, [r7, #20]
 8000380:	4313      	orrs	r3, r2
 8000382:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	78db      	ldrb	r3, [r3, #3]
 8000388:	2b28      	cmp	r3, #40	; 0x28
 800038a:	d105      	bne.n	8000398 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800038c:	2201      	movs	r2, #1
 800038e:	69bb      	ldr	r3, [r7, #24]
 8000390:	409a      	lsls	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	615a      	str	r2, [r3, #20]
 8000396:	e008      	b.n	80003aa <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	78db      	ldrb	r3, [r3, #3]
 800039c:	2b48      	cmp	r3, #72	; 0x48
 800039e:	d104      	bne.n	80003aa <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80003a0:	2201      	movs	r2, #1
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	409a      	lsls	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003aa:	69bb      	ldr	r3, [r7, #24]
 80003ac:	3301      	adds	r3, #1
 80003ae:	61bb      	str	r3, [r7, #24]
 80003b0:	69bb      	ldr	r3, [r7, #24]
 80003b2:	2b07      	cmp	r3, #7
 80003b4:	d9c3      	bls.n	800033e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	697a      	ldr	r2, [r7, #20]
 80003ba:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	2bff      	cmp	r3, #255	; 0xff
 80003c2:	d946      	bls.n	8000452 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003ca:	2300      	movs	r3, #0
 80003cc:	61bb      	str	r3, [r7, #24]
 80003ce:	e03a      	b.n	8000446 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80003d0:	69bb      	ldr	r3, [r7, #24]
 80003d2:	3308      	adds	r3, #8
 80003d4:	2201      	movs	r2, #1
 80003d6:	fa02 f303 	lsl.w	r3, r2, r3
 80003da:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	461a      	mov	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	4013      	ands	r3, r2
 80003e6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80003e8:	693a      	ldr	r2, [r7, #16]
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d127      	bne.n	8000440 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80003f0:	69bb      	ldr	r3, [r7, #24]
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003f6:	220f      	movs	r2, #15
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	fa02 f303 	lsl.w	r3, r2, r3
 80003fe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	43db      	mvns	r3, r3
 8000404:	697a      	ldr	r2, [r7, #20]
 8000406:	4013      	ands	r3, r2
 8000408:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800040a:	69fa      	ldr	r2, [r7, #28]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	fa02 f303 	lsl.w	r3, r2, r3
 8000412:	697a      	ldr	r2, [r7, #20]
 8000414:	4313      	orrs	r3, r2
 8000416:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	78db      	ldrb	r3, [r3, #3]
 800041c:	2b28      	cmp	r3, #40	; 0x28
 800041e:	d105      	bne.n	800042c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	3308      	adds	r3, #8
 8000424:	2201      	movs	r2, #1
 8000426:	409a      	lsls	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	78db      	ldrb	r3, [r3, #3]
 8000430:	2b48      	cmp	r3, #72	; 0x48
 8000432:	d105      	bne.n	8000440 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000434:	69bb      	ldr	r3, [r7, #24]
 8000436:	3308      	adds	r3, #8
 8000438:	2201      	movs	r2, #1
 800043a:	409a      	lsls	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	3301      	adds	r3, #1
 8000444:	61bb      	str	r3, [r7, #24]
 8000446:	69bb      	ldr	r3, [r7, #24]
 8000448:	2b07      	cmp	r3, #7
 800044a:	d9c1      	bls.n	80003d0 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	697a      	ldr	r2, [r7, #20]
 8000450:	605a      	str	r2, [r3, #4]
  }
}
 8000452:	bf00      	nop
 8000454:	3724      	adds	r7, #36	; 0x24
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000468:	887a      	ldrh	r2, [r7, #2]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	611a      	str	r2, [r3, #16]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	460b      	mov	r3, r1
 8000482:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d006      	beq.n	8000498 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <RCC_APB2PeriphClockCmd+0x38>)
 800048c:	699a      	ldr	r2, [r3, #24]
 800048e:	4908      	ldr	r1, [pc, #32]	; (80004b0 <RCC_APB2PeriphClockCmd+0x38>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000496:	e006      	b.n	80004a6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <RCC_APB2PeriphClockCmd+0x38>)
 800049a:	699a      	ldr	r2, [r3, #24]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	43db      	mvns	r3, r3
 80004a0:	4903      	ldr	r1, [pc, #12]	; (80004b0 <RCC_APB2PeriphClockCmd+0x38>)
 80004a2:	4013      	ands	r3, r2
 80004a4:	618b      	str	r3, [r1, #24]
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40021000 	.word	0x40021000

080004b4 <lightLed1>:
	LED2 = led2Stat;
	led1Stat = led1Stat;
}


void lightLed1( void *param ) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
    while (1)
    {
        led1Stat = !led1Stat;
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <lightLed1+0x30>)
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	bf0c      	ite	eq
 80004c4:	2301      	moveq	r3, #1
 80004c6:	2300      	movne	r3, #0
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	b29a      	uxth	r2, r3
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <lightLed1+0x30>)
 80004ce:	801a      	strh	r2, [r3, #0]
        LED1 = led1Stat;
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <lightLed1+0x30>)
 80004d2:	881a      	ldrh	r2, [r3, #0]
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <lightLed1+0x34>)
 80004d6:	601a      	str	r2, [r3, #0]
        willingSleep_ms(500);
 80004d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004dc:	f000 fdde 	bl	800109c <willingSleep_ms>
        led1Stat = !led1Stat;
 80004e0:	e7ec      	b.n	80004bc <lightLed1+0x8>
 80004e2:	bf00      	nop
 80004e4:	20000084 	.word	0x20000084
 80004e8:	42218194 	.word	0x42218194

080004ec <initLed>:
void delay(u32 i)
{
	while(i--);
}

void initLed( void ) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	
	RCC_APB2PeriphClockCmd(LED1_PORT_RCC|LED2_PORT_RCC,ENABLE);
 80004f2:	2101      	movs	r1, #1
 80004f4:	2048      	movs	r0, #72	; 0x48
 80004f6:	f7ff ffbf 	bl	8000478 <RCC_APB2PeriphClockCmd>
	
	GPIO_InitStructure.GPIO_Pin=LED1_PIN;  
 80004fa:	2320      	movs	r3, #32
 80004fc:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP;	
 80004fe:	2310      	movs	r3, #16
 8000500:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;	  
 8000502:	2303      	movs	r3, #3
 8000504:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(LED1_PORT,&GPIO_InitStructure); 	
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	4619      	mov	r1, r3
 800050a:	480b      	ldr	r0, [pc, #44]	; (8000538 <initLed+0x4c>)
 800050c:	f7ff feea 	bl	80002e4 <GPIO_Init>
	GPIO_SetBits(LED1_PORT,LED1_PIN);   
 8000510:	2120      	movs	r1, #32
 8000512:	4809      	ldr	r0, [pc, #36]	; (8000538 <initLed+0x4c>)
 8000514:	f7ff ffa2 	bl	800045c <GPIO_SetBits>
	
	GPIO_InitStructure.GPIO_Pin=LED2_PIN;  
 8000518:	2320      	movs	r3, #32
 800051a:	80bb      	strh	r3, [r7, #4]
	GPIO_Init(LED2_PORT,&GPIO_InitStructure); 	   
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	4619      	mov	r1, r3
 8000520:	4806      	ldr	r0, [pc, #24]	; (800053c <initLed+0x50>)
 8000522:	f7ff fedf 	bl	80002e4 <GPIO_Init>
	GPIO_SetBits(LED2_PORT,LED2_PIN);   
 8000526:	2120      	movs	r1, #32
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <initLed+0x50>)
 800052a:	f7ff ff97 	bl	800045c <GPIO_SetBits>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40010c00 	.word	0x40010c00
 800053c:	40011800 	.word	0x40011800

08000540 <insertWillingList_SortASC>:
    list->tail = NULL;
    // list->current = NULL;
}


UBase_t insertWillingList_SortASC(  List_t * const list, ListItem_t * const item  ){
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
    UBase_t itemNums = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
	  ListItem_t * nextItem = NULL;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
	ListItem_t * currentItem = NULL;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
    /* 判断参数的代码在这个级别上来说不一定有用，一是降低了效率，
    二是系统级别的代码如果参数都存在问题，是不可想象的
    三是变量在分配内存后不必要立即进行初始化，因此tcbWith可能是无效的任意值不一定为NULL */
    if ( list == NULL  || item == NULL || item->tcbWith == NULL ) {
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d006      	beq.n	800056a <insertWillingList_SortASC+0x2a>
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d003      	beq.n	800056a <insertWillingList_SortASC+0x2a>
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <insertWillingList_SortASC+0x2e>
        return 0;
 800056a:	2300      	movs	r3, #0
 800056c:	e050      	b.n	8000610 <insertWillingList_SortASC+0xd0>
    }

    currentItem = list->head;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	617b      	str	r3, [r7, #20]
    if ( currentItem == NULL ) {
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d116      	bne.n	80005a8 <insertWillingList_SortASC+0x68>
        list->head = item;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	605a      	str	r2, [r3, #4]
        list->tail = item;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	609a      	str	r2, [r3, #8]
        item->next = NULL;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
        item->previous = NULL;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2200      	movs	r2, #0
 8000590:	605a      	str	r2, [r3, #4]
        item->listWith = list;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	60da      	str	r2, [r3, #12]

        list->itemNum++;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	1c5a      	adds	r2, r3, #1
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	601a      	str	r2, [r3, #0]
        return list->itemNum;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	e033      	b.n	8000610 <insertWillingList_SortASC+0xd0>
    }

    /* 查找tickCountSession */
    if ( currentItem->tickCountSession != item->tickCountSession ) {
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	7d1a      	ldrb	r2, [r3, #20]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	7d1b      	ldrb	r3, [r3, #20]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d022      	beq.n	80005fa <insertWillingList_SortASC+0xba>
        while ( currentItem->tickCountSession == item->tickCountSession ) {
 80005b4:	e006      	b.n	80005c4 <insertWillingList_SortASC+0x84>
            if ( currentItem->next != NULL ) {
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d009      	beq.n	80005d2 <insertWillingList_SortASC+0x92>
                currentItem = currentItem->next;
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	617b      	str	r3, [r7, #20]
        while ( currentItem->tickCountSession == item->tickCountSession ) {
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	7d1a      	ldrb	r2, [r3, #20]
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	7d1b      	ldrb	r3, [r3, #20]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d0f2      	beq.n	80005b6 <insertWillingList_SortASC+0x76>
 80005d0:	e013      	b.n	80005fa <insertWillingList_SortASC+0xba>
            } else {
                break;
 80005d2:	bf00      	nop
            }
        }
    }

    /* 查找插入位置 */
    while ( currentItem->next == NULL ) {
 80005d4:	e011      	b.n	80005fa <insertWillingList_SortASC+0xba>
        nextItem = currentItem->next;
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	60fb      	str	r3, [r7, #12]
        if ( item->sortValue >= currentItem->sortValue && item->sortValue < nextItem->sortValue ) {
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	691a      	ldr	r2, [r3, #16]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d305      	bcc.n	80005f4 <insertWillingList_SortASC+0xb4>
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	691a      	ldr	r2, [r3, #16]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d306      	bcc.n	8000602 <insertWillingList_SortASC+0xc2>
            break;
        } else {
            currentItem->next = nextItem;
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	601a      	str	r2, [r3, #0]
    while ( currentItem->next == NULL ) {
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0e9      	beq.n	80005d6 <insertWillingList_SortASC+0x96>
        }
    }
    
    /* 插入 */
    itemNums = insertWillingList_Behind( list, currentItem, item );
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	6979      	ldr	r1, [r7, #20]
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f83a 	bl	8000680 <insertWillingList_Behind>
 800060c:	6138      	str	r0, [r7, #16]
    return itemNums;
 800060e:	693b      	ldr	r3, [r7, #16]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <insertWillingList_Head>:
    list->itemNum++;
    return list->itemNum;
}


UBase_t insertWillingList_Head( List_t * const list, ListItem_t * const item ) {
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    if ( list == NULL || item == NULL ) {
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <insertWillingList_Head+0x16>
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d101      	bne.n	8000632 <insertWillingList_Head+0x1a>
        return 0;
 800062e:	2300      	movs	r3, #0
 8000630:	e021      	b.n	8000676 <insertWillingList_Head+0x5e>
    }
		item->listWith = list;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	60da      	str	r2, [r3, #12]

    if ( list->head == NULL ) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d109      	bne.n	8000654 <insertWillingList_Head+0x3c>
        list->head = item;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	605a      	str	r2, [r3, #4]
        list->tail = item;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	609a      	str	r2, [r3, #8]
			  item->next = NULL;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	e006      	b.n	8000662 <insertWillingList_Head+0x4a>
    } else {
        item->next = list->head;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	685a      	ldr	r2, [r3, #4]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	601a      	str	r2, [r3, #0]
        list->head = item;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	605a      	str	r2, [r3, #4]
    }

    item->previous = NULL;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
    list->itemNum++;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	1c5a      	adds	r2, r3, #1
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	601a      	str	r2, [r3, #0]
    return list->itemNum;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <insertWillingList_Behind>:


UBase_t insertWillingList_Behind( List_t * const list, ListItem_t * const currentItem, ListItem_t * const item ) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
    if ( item == NULL || list == NULL ) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <insertWillingList_Behind+0x18>
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d101      	bne.n	800069c <insertWillingList_Behind+0x1c>
        return 0;
 8000698:	2300      	movs	r3, #0
 800069a:	e029      	b.n	80006f0 <insertWillingList_Behind+0x70>
    }

     item->listWith = list;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	60da      	str	r2, [r3, #12]

    if ( currentItem == NULL ) {
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d104      	bne.n	80006b2 <insertWillingList_Behind+0x32>
			insertWillingList_Head( list, item );
 80006a8:	6879      	ldr	r1, [r7, #4]
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f7ff ffb4 	bl	8000618 <insertWillingList_Head>
 80006b0:	e01c      	b.n	80006ec <insertWillingList_Behind+0x6c>
//        item->next = list->head;
//        item->previous = NULL;
//        list->head = item;
    } else {
        if ( currentItem->listWith != list ) {
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d001      	beq.n	80006c0 <insertWillingList_Behind+0x40>
            return 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	e017      	b.n	80006f0 <insertWillingList_Behind+0x70>
        }

        item->next = currentItem->next;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	601a      	str	r2, [r3, #0]
				currentItem->next = item;
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]
        item->previous = currentItem;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	605a      	str	r2, [r3, #4]
    
        if ( item->next == NULL ) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d102      	bne.n	80006e2 <insertWillingList_Behind+0x62>
            list->tail = item;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	609a      	str	r2, [r3, #8]
        }
				
				list->itemNum++;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	601a      	str	r2, [r3, #0]
    }

    
    return list->itemNum;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	681b      	ldr	r3, [r3, #0]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <getWillingListNextItem>:
//     }

//     return list->current;
// }

ListItem_t * getWillingListNextItem( List_t * const list , ListItem_t * const item) {
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
    if ( list == NULL || item == NULL || item->listWith != list ) {
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d007      	beq.n	8000718 <getWillingListNextItem+0x20>
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <getWillingListNextItem+0x20>
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	d001      	beq.n	800071c <getWillingListNextItem+0x24>
        return NULL;
 8000718:	2300      	movs	r3, #0
 800071a:	e001      	b.n	8000720 <getWillingListNextItem+0x28>
    }

    return item->next;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <getWillingListHeadItem>:
    }

    return item->previous;
}

ListItem_t * getWillingListHeadItem( List_t * const list ) {
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
    if ( list == NULL ) {
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d101      	bne.n	800073c <getWillingListHeadItem+0x12>
        return NULL;
 8000738:	2300      	movs	r3, #0
 800073a:	e001      	b.n	8000740 <getWillingListHeadItem+0x16>
    }

    return list->head;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	685b      	ldr	r3, [r3, #4]
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <removeWillingListItem>:

// ListItem_t * moveWillingListCursorTo( List_t * const list, ListItem_t * const item ) {

// }

UBase_t removeWillingListItem( List_t * const list, ListItem_t * const item ) {
 800074a:	b480      	push	{r7}
 800074c:	b085      	sub	sp, #20
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	6039      	str	r1, [r7, #0]
    if ( list == NULL || item == NULL || item->listWith != list ) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d007      	beq.n	800076a <removeWillingListItem+0x20>
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d004      	beq.n	800076a <removeWillingListItem+0x20>
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	429a      	cmp	r2, r3
 8000768:	d001      	beq.n	800076e <removeWillingListItem+0x24>
        return 0;
 800076a:	2300      	movs	r3, #0
 800076c:	e065      	b.n	800083a <removeWillingListItem+0xf0>
    }

//  只有一个元素的情况
    if ( item->next == NULL && item->previous == NULL ) {
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d115      	bne.n	80007a2 <removeWillingListItem+0x58>
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d111      	bne.n	80007a2 <removeWillingListItem+0x58>
        list->head = NULL;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
        list->tail = NULL;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
        list->itemNum = 0;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
					item->next = NULL;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
		item->previous = NULL;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
        return list->itemNum;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	e04b      	b.n	800083a <removeWillingListItem+0xf0>
    }

// 删除tail
    if ( item->next == NULL ) {
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d116      	bne.n	80007d8 <removeWillingListItem+0x8e>
        ListItem_t * previousItem = item->previous;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	60fb      	str	r3, [r7, #12]
        previousItem->next = NULL;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
        list->tail = previousItem;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	609a      	str	r2, [r3, #8]
        list->itemNum--;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	1e5a      	subs	r2, r3, #1
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
					item->next = NULL;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
		item->previous = NULL;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
        return list->itemNum;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	e030      	b.n	800083a <removeWillingListItem+0xf0>
    }

// 删除head
    if ( item->previous == NULL ) {
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d115      	bne.n	800080c <removeWillingListItem+0xc2>
        list->head = item->next;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	605a      	str	r2, [r3, #4]
        list->head->previous = NULL;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
        list->itemNum--;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	601a      	str	r2, [r3, #0]
        item->next = NULL;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
		item->previous = NULL;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
       return list->itemNum;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	e016      	b.n	800083a <removeWillingListItem+0xf0>
    }
// 删除中间
    item->previous->next = item->next;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	6812      	ldr	r2, [r2, #0]
 8000814:	601a      	str	r2, [r3, #0]
    item->next->previous = item->previous;
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	683a      	ldr	r2, [r7, #0]
 800081c:	6852      	ldr	r2, [r2, #4]
 800081e:	605a      	str	r2, [r3, #4]
    list->itemNum--;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	601a      	str	r2, [r3, #0]
		item->next = NULL;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
		item->previous = NULL;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
    return list->itemNum;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <maximizeBasePriority>:
extern void exitCriticalSection( void );

#define SET_INTERRUPT_MASK_FROM_ISR setInterruptMaskFromISR()
#define CLEAR_INTERRUPT_MASK_FROM_ISR(x)  clearInterruptMaskFromISR( x )

static willingFORCE_INLINE void maximizeBasePriority( void ) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
    uint32_t maxPriority;// = MAX_SYS_INTERRUPT_PRIORITY;
    __asm volatile( "mov %0, %1 \n"
 800084a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800084e:	f383 8811 	msr	BASEPRI, r3
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	f3bf 8f6f 	isb	sy
 800085a:	607b      	str	r3, [r7, #4]
    	   "dsb \n" /* 数据同步屏障，通过对指令流水的管理，确保dsb之前的所有显式数据内存传输指令都已经再内存中读取或写入完成，同时确保任何后续的指令都将再dsb执行之后开始执行 */
    	   "isb \n"
    		:"=r"(maxPriority) : "i" (MAX_SYS_INTERRUPT_PRIORITY) : "memory"
    		);/* 指令同步屏障，通过插入isb指令，处理器会将流水线中的指令全部刷新（flush），从而确保之前的指令不会影响后续的指令执行，并且后续指令将从正确的上下文开始重新获取 */

}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <clearBasePriorityFromISR>:

static willingFORCE_INLINE void clearBasePriorityFromISR( void ) {
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
    __asm volatile( "msr basepri, %0" :: "r" (0) : "memory" );
 800086a:	2300      	movs	r3, #0
 800086c:	f383 8811 	msr	BASEPRI, r3
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <taskExitError>:
#define NVIC_SYSTICK_CLK_BIT	   ( 1UL << 2UL )
#define NVIC_SYSTICK_INT_BIT       ( 1UL << 1UL )
#define NVIC_SYSTICK_ENABLE_BIT	   ( 1UL << 0UL )

static void taskExitError( void )
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	for( ;; );
 800087c:	e7fe      	b.n	800087c <taskExitError+0x4>
	...

08000880 <initStack>:
}

Stack_t *initStack( Stack_t *topOfStack, TaskFunc_t taskFunc, void *params )
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]

	topOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3b04      	subs	r3, #4
 8000890:	60fb      	str	r3, [r7, #12]
	*topOfStack = INITIAL_XPSR;	/* xPSR */
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000898:	601a      	str	r2, [r3, #0]
	topOfStack--;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3b04      	subs	r3, #4
 800089e:	60fb      	str	r3, [r7, #12]
	*topOfStack = ( ( Stack_t ) taskFunc ) & START_ADDRESS_MASK;	/* PC */
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	f023 0201 	bic.w	r2, r3, #1
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	601a      	str	r2, [r3, #0]
	topOfStack--;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3b04      	subs	r3, #4
 80008ae:	60fb      	str	r3, [r7, #12]
	*topOfStack = ( Stack_t ) taskExitError;	/* LR */
 80008b0:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <initStack+0x54>)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	601a      	str	r2, [r3, #0]

	topOfStack -= 5;	/* R12, R3, R2 and R1. */
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	3b14      	subs	r3, #20
 80008ba:	60fb      	str	r3, [r7, #12]
	*topOfStack = ( Stack_t ) params;	/* R0 */
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	601a      	str	r2, [r3, #0]
	topOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3b20      	subs	r3, #32
 80008c6:	60fb      	str	r3, [r7, #12]

	return topOfStack;
 80008c8:	68fb      	ldr	r3, [r7, #12]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	08000879 	.word	0x08000879

080008d8 <sysTickHandler>:



/*  检查等待列表，将延时时间到的任务移到就绪表，并判断就绪表是否有超过1个任务，如果超过1个，则调度
*/
void sysTickHandler( void ) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    /* SysTick 以最低中断优先级运行，因此当该中断执行时，必须取消屏蔽所有中断。因此，无需保存然后恢复中断屏蔽值，因为其值已知 - 因此使用稍快的 RaiseBASEPRI() 函数
代替 SET_INTERRUPT_MASK_FROM_ISR() */
    /* 屏蔽相关中断 */
    maximizeBasePriority();
 80008dc:	f7ff ffb2 	bl	8000844 <maximizeBasePriority>
    {
        tickCount++;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <sysTickHandler+0x50>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <sysTickHandler+0x50>)
 80008e8:	6013      	str	r3, [r2, #0]
        if ( tickCount == 0 ) {
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <sysTickHandler+0x50>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10a      	bne.n	8000908 <sysTickHandler+0x30>
            tickCountSession = !tickCountSession;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <sysTickHandler+0x54>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	bf0c      	ite	eq
 80008fc:	2301      	moveq	r3, #1
 80008fe:	2300      	movne	r3, #0
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <sysTickHandler+0x54>)
 8000906:	701a      	strb	r2, [r3, #0]
        }
        
        processDelay();
 8000908:	f000 fc58 	bl	80011bc <processDelay>
        
        /* 调用系统时钟节拍服务 */
        if ( sysTickService() == wTRUE ) {
 800090c:	f000 faa4 	bl	8000e58 <sysTickService>
 8000910:	4603      	mov	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d103      	bne.n	800091e <sysTickHandler+0x46>
            /* 
                如果需要进行调度，则进行任务切换
                出发pendsv中断，在pendsv中断中进行切换
             */
            NVIC_INTERRUPUT_CTRL_REG = NVIC_PENDSV_SET_BIT;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <sysTickHandler+0x58>)
 8000918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800091c:	601a      	str	r2, [r3, #0]
        }
    }
    /* 开启相关中断 */
   clearBasePriorityFromISR();
 800091e:	f7ff ffa2 	bl	8000866 <clearBasePriorityFromISR>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000094 	.word	0x20000094
 800092c:	20000098 	.word	0x20000098
 8000930:	e000ed04 	.word	0xe000ed04

08000934 <setupTimerInterrupt>:
//     */
//    max

}

void setupTimerInterrupt( void ) {
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
    SysTick->LOAD = ( SYS_TICK_CLOCK_RATE / SYS_TICK_RATE ) - 1UL;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <setupTimerInterrupt+0x24>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <setupTimerInterrupt+0x28>)
 800093e:	fba2 2303 	umull	r2, r3, r2, r3
 8000942:	095b      	lsrs	r3, r3, #5
 8000944:	4a06      	ldr	r2, [pc, #24]	; (8000960 <setupTimerInterrupt+0x2c>)
 8000946:	3b01      	subs	r3, #1
 8000948:	6053      	str	r3, [r2, #4]
    SysTick->CTRL = ( NVIC_SYSTICK_CLK_BIT | NVIC_SYSTICK_INT_BIT | NVIC_SYSTICK_ENABLE_BIT );
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <setupTimerInterrupt+0x2c>)
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000008 	.word	0x20000008
 800095c:	51eb851f 	.word	0x51eb851f
 8000960:	e000e010 	.word	0xe000e010

08000964 <startWillingScheduler>:


static void startFirstTask( void );

Base_t startWillingScheduler( void ) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
    Base_t rlt = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]

    /* 将PendSV和systick中断优先级设置为最低 */
    NVIC_SYS_PRI2_REG |= NVIC_PENDSV_PRI;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <startWillingScheduler+0x3c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <startWillingScheduler+0x3c>)
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000978:	6013      	str	r3, [r2, #0]
    NVIC_SYS_PRI2_REG |= NVIC_SYSTICK_PRI;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <startWillingScheduler+0x3c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <startWillingScheduler+0x3c>)
 8000980:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000984:	6013      	str	r3, [r2, #0]

    setupTimerInterrupt();
 8000986:	f7ff ffd5 	bl	8000934 <setupTimerInterrupt>

    criticalNesting = 0;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <startWillingScheduler+0x40>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]

    startFirstTask();
 8000990:	f000 f86c 	bl	8000a6c <startFirstTask>

    return rlt;
 8000994:	687b      	ldr	r3, [r7, #4]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	e000ed20 	.word	0xe000ed20
 80009a4:	20000004 	.word	0x20000004

080009a8 <enterCriticalSection>:

void stopWillingScheduler( void ) {
    willingAssert(criticalNesting==1000UL);
}

void enterCriticalSection( void ) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    __asm volatile("cpsid i" ::: "memory");  /* 关中断 */
 80009ac:	b672      	cpsid	i

    criticalNesting++;
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <enterCriticalSection+0x30>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <enterCriticalSection+0x30>)
 80009b6:	6013      	str	r3, [r2, #0]

    if ( criticalNesting == 1 ) {
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <enterCriticalSection+0x30>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d109      	bne.n	80009d4 <enterCriticalSection+0x2c>
        willingAssert( (NVIC_INTERRUPUT_CTRL_REG & ICSR_NONE_VECTOR_ACTIVE_MASK ) == 0 );
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <enterCriticalSection+0x34>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d004      	beq.n	80009d4 <enterCriticalSection+0x2c>
 80009ca:	2298      	movs	r2, #152	; 0x98
 80009cc:	4904      	ldr	r1, [pc, #16]	; (80009e0 <enterCriticalSection+0x38>)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <enterCriticalSection+0x3c>)
 80009d0:	f000 ff86 	bl	80018e0 <iprintf>
    }
} 
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000004 	.word	0x20000004
 80009dc:	e000ed04 	.word	0xe000ed04
 80009e0:	0800249c 	.word	0x0800249c
 80009e4:	080024c8 	.word	0x080024c8

080009e8 <exitCriticalSection>:

void exitCriticalSection( void ) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
    willingAssert(criticalNesting);
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <exitCriticalSection+0x30>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d104      	bne.n	80009fe <exitCriticalSection+0x16>
 80009f4:	229d      	movs	r2, #157	; 0x9d
 80009f6:	4909      	ldr	r1, [pc, #36]	; (8000a1c <exitCriticalSection+0x34>)
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <exitCriticalSection+0x38>)
 80009fa:	f000 ff71 	bl	80018e0 <iprintf>
    criticalNesting--;
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <exitCriticalSection+0x30>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <exitCriticalSection+0x30>)
 8000a06:	6013      	str	r3, [r2, #0]
    if ( criticalNesting == 0 ) {
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <exitCriticalSection+0x30>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d100      	bne.n	8000a12 <exitCriticalSection+0x2a>
       __asm volatile( "cpsie i" ::: "memory" );  /* 开中断 */
 8000a10:	b662      	cpsie	i
    }
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000004 	.word	0x20000004
 8000a1c:	0800249c 	.word	0x0800249c
 8000a20:	080024c8 	.word	0x080024c8
	...

08000a30 <SVC_Handler>:

将 BASEPRI 寄存器赋值为 0，即允许任何中断

最后执行 bx R14，告诉处理器 ISR 完成，需要返回，此刻处理器便会进行出栈操作，PC 被我们赋值成为了执行任务的函数的入口，任务正式跑起来；
*/
 void SVCHandler( void ) {
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
	__asm volatile(  /* 声明堆栈的对齐方式为8字节对齐 */
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <currentTCBConstSVC>)
 8000a36:	6819      	ldr	r1, [r3, #0]
 8000a38:	6808      	ldr	r0, [r1, #0]
 8000a3a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a3e:	f380 8809 	msr	PSP, r0
 8000a42:	f3bf 8f6f 	isb	sy
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f380 8811 	msr	BASEPRI, r0
 8000a4e:	f04e 0e0d 	orr.w	lr, lr, #13
 8000a52:	4770      	bx	lr
 8000a54:	f3af 8000 	nop.w
 8000a58:	f3af 8000 	nop.w
 8000a5c:	f3af 8000 	nop.w

08000a60 <currentTCBConstSVC>:
 8000a60:	200000b8 	.word	0x200000b8
	"bx r14 \n"
	"     \n"
	".align 4  \n"
	"currentTCBConstSVC: .word currentTCB  \n"
	);
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <startFirstTask>:
所以通过 MSR 重新初始化 MSP，丢弃主堆栈中的数据； 当然，这是一条不归路，代码跑到这里，不会再返回之前的调用路径。
最后调用 svc 并传入系统调用号为 0 启动 SVC 中断

*/

void startFirstTask( void ) {
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
	/* Use the NVIC offset register to locate the stack. */
	__asm volatile(
 8000a70:	4808      	ldr	r0, [pc, #32]	; (8000a94 <startFirstTask+0x28>)
 8000a72:	6800      	ldr	r0, [r0, #0]
 8000a74:	6800      	ldr	r0, [r0, #0]
 8000a76:	f380 8808 	msr	MSP, r0
 8000a7a:	b662      	cpsie	i
 8000a7c:	b661      	cpsie	f
 8000a7e:	f3bf 8f4f 	dsb	sy
 8000a82:	f3bf 8f6f 	isb	sy
 8000a86:	df00      	svc	0
 8000a88:	bf00      	nop
	"isb \n"
	/* Call SVC to start the first task. */
	"svc 0 \n"
	"nop \n"
			);
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	0000      	.short	0x0000
 8000a94:	e000ed08 	.word	0xe000ed08
	...

08000aa0 <PendSV_Handler>:

 void pendSVHandler( void ) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
//	extern criticalNesting;
//    extern currentTCB;
//    extern taskSwitchContext;
//
	 
    __asm volatile(
 8000aa4:	f3ef 8009 	mrs	r0, PSP
 8000aa8:	f3bf 8f6f 	isb	sy
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <currentTCBConstPendSV>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ab4:	6010      	str	r0, [r2, #0]
 8000ab6:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000aba:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000abe:	f380 8811 	msr	BASEPRI, r0
 8000ac2:	f3bf 8f4f 	dsb	sy
 8000ac6:	f3bf 8f6f 	isb	sy
 8000aca:	f000 fa41 	bl	8000f50 <taskSwitchContext>
 8000ace:	f04f 0000 	mov.w	r0, #0
 8000ad2:	f380 8811 	msr	BASEPRI, r0
 8000ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000ada:	6819      	ldr	r1, [r3, #0]
 8000adc:	6808      	ldr	r0, [r1, #0]
 8000ade:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ae2:	f380 8809 	msr	PSP, r0
 8000ae6:	f3bf 8f6f 	isb	sy
 8000aea:	4770      	bx	lr
 8000aec:	f3af 8000 	nop.w

08000af0 <currentTCBConstPendSV>:
 8000af0:	200000b8 	.word	0x200000b8
    "      \n"
    ".align 4 \n"
    "currentTCBConstPendSV: .word currentTCB \n"
    ::"i"(MAX_SYS_INTERRUPT_PRIORITY)
	);
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <willingMalloc>:
#include <stdlib.h>
#include "coreDef.h"


void *willingMalloc( size_t dstSize ) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    void * rlt = NULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
    rlt = malloc( dstSize );
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 fd6b 	bl	80015e4 <malloc>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	60fb      	str	r3, [r7, #12]
	
	willingAssert(rlt);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d104      	bne.n	8000b22 <willingMalloc+0x26>
 8000b18:	2209      	movs	r2, #9
 8000b1a:	4904      	ldr	r1, [pc, #16]	; (8000b2c <willingMalloc+0x30>)
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <willingMalloc+0x34>)
 8000b1e:	f000 fedf 	bl	80018e0 <iprintf>

    return rlt;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	080024d8 	.word	0x080024d8
 8000b30:	080024fc 	.word	0x080024fc

08000b34 <willingFree>:

void willingFree( void *var ) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
    if (var) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <willingFree+0x14>
        free(var);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 fd56 	bl	80015f4 <free>
    }
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <setSysTickClkSource>:
#include "sysTick.h"

static u8  fac_us=0;							//us延时倍乘数			   
static u16 fac_ms=0;							//ms延时倍乘数

void setSysTickClkSource(uint32_t source) {
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
    if ( IsSysTickClkSource( source ) ) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	d003      	beq.n	8000b66 <setSysTickClkSource+0x16>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f113 0f05 	cmn.w	r3, #5
 8000b64:	d10f      	bne.n	8000b86 <setSysTickClkSource+0x36>
        if (source == SysTickClkSourceHCLK) {
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d106      	bne.n	8000b7a <setSysTickClkSource+0x2a>
            SysTick->CTRL |= SysTickClkSourceHCLK;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <setSysTickClkSource+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <setSysTickClkSource+0x40>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6013      	str	r3, [r2, #0]
        } else {
            SysTick->CTRL |= SysTickClkSourceHCLKDiv8;
        }
    }
}
 8000b78:	e005      	b.n	8000b86 <setSysTickClkSource+0x36>
            SysTick->CTRL |= SysTickClkSourceHCLKDiv8;
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <setSysTickClkSource+0x40>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <setSysTickClkSource+0x40>)
 8000b80:	f063 0304 	orn	r3, r3, #4
 8000b84:	6013      	str	r3, [r2, #0]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <initSysTick>:

/* 初始化系统节拍 */
void initSysTick( uint8_t sysClk ) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
    uint32_t reloadValue = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
    setSysTickClkSource( SysTickClkSourceHCLK );
 8000ba2:	2004      	movs	r0, #4
 8000ba4:	f7ff ffd4 	bl	8000b50 <setSysTickClkSource>
    reloadValue = SysClockFrequence / SYS_TICK_RATE; /* 根据configTICK_RATE_HZ设定溢出时间
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <initSysTick+0x70>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <initSysTick+0x74>)
 8000bae:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	60fb      	str	r3, [r7, #12]
		//										     reload为24位寄存器,最大值:16777216,在72M下,约0.233s */

	fac_us=sysClk;				
 8000bb6:	4a15      	ldr	r2, [pc, #84]	; (8000c0c <initSysTick+0x78>)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	7013      	strb	r3, [r2, #0]
	reloadValue = sysClk * (1000000/SYS_TICK_RATE);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8000bc2:	fb02 f303 	mul.w	r3, r2, r3
 8000bc6:	60fb      	str	r3, [r7, #12]
//  SystemCoreClock/1000000;				
	//reloadValue*=1000000/SYS_TICK_RATE;			
												
	fac_ms=fac_us * fac_us;			   
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <initSysTick+0x78>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <initSysTick+0x78>)
 8000bd0:	7812      	ldrb	r2, [r2, #0]
 8000bd2:	b292      	uxth	r2, r2
 8000bd4:	fb02 f303 	mul.w	r3, r2, r3
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <initSysTick+0x7c>)
 8000bdc:	801a      	strh	r2, [r3, #0]

    /* 配置硬件 */
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; /* 开启systick 中断 */
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <initSysTick+0x80>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <initSysTick+0x80>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6013      	str	r3, [r2, #0]
    SysTick->LOAD = reloadValue; /* 每1/SYS_TICK_RATE秒中断一次 */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <initSysTick+0x80>)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	6053      	str	r3, [r2, #4]
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; /* 开启SysTick */
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <initSysTick+0x80>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <initSysTick+0x80>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6013      	str	r3, [r2, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000008 	.word	0x20000008
 8000c08:	51eb851f 	.word	0x51eb851f
 8000c0c:	20000086 	.word	0x20000086
 8000c10:	20000088 	.word	0x20000088
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <initWilling>:
#include "task.h"

void initNVICPriorityGroup(uint32_t priorityGroup);
void initKernel( void );
	
void initWilling(OSErr *err) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    *err = OSErrNone;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
     initSysTick(72);
 8000c26:	2048      	movs	r0, #72	; 0x48
 8000c28:	f7ff ffb4 	bl	8000b94 <initSysTick>

    /*
        初始化中断优先级group，f103只用了4位优先级Bits[7:4]
    */
     initNVICPriorityGroup(NVIC_PriorityGroup_4); 
 8000c2c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000c30:	f000 f806 	bl	8000c40 <initNVICPriorityGroup>

     initKernel();
 8000c34:	f000 fafa 	bl	800122c <initKernel>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <initNVICPriorityGroup>:

void initNVICPriorityGroup(uint32_t priorityGroup) {
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
    SysCtrlBlock->AIRCR = AIRCR_VECTKEY_MASK | priorityGroup;
 8000c48:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <initNVICPriorityGroup+0x20>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	60d3      	str	r3, [r2, #12]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <willingStart>:


void willingStart(OSErr *err) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
    OSStart();
 8000c6c:	f000 f9a0 	bl	8000fb0 <OSStart>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <maximizeBasePriority>:
extern void exitCriticalSection( void );

#define SET_INTERRUPT_MASK_FROM_ISR setInterruptMaskFromISR()
#define CLEAR_INTERRUPT_MASK_FROM_ISR(x)  clearInterruptMaskFromISR( x )

static willingFORCE_INLINE void maximizeBasePriority( void ) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
    uint32_t maxPriority;// = MAX_SYS_INTERRUPT_PRIORITY;
    __asm volatile( "mov %0, %1 \n"
 8000c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c82:	f383 8811 	msr	BASEPRI, r3
 8000c86:	f3bf 8f4f 	dsb	sy
 8000c8a:	f3bf 8f6f 	isb	sy
 8000c8e:	607b      	str	r3, [r7, #4]
    	   "dsb \n" /* 数据同步屏障，通过对指令流水的管理，确保dsb之前的所有显式数据内存传输指令都已经再内存中读取或写入完成，同时确保任何后续的指令都将再dsb执行之后开始执行 */
    	   "isb \n"
    		:"=r"(maxPriority) : "i" (MAX_SYS_INTERRUPT_PRIORITY) : "memory"
    		);/* 指令同步屏障，通过插入isb指令，处理器会将流水线中的指令全部刷新（flush），从而确保之前的指令不会影响后续的指令执行，并且后续指令将从正确的上下文开始重新获取 */

}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
	...

08000c9c <createTask>:
                  const char *const taskName, /* 任务名称 */
                  const uint32_t stackSize,   /* 栈大小 */
                  void *const params,         /* 传递给taskFunc的参数 */
                  ULong_t priority,           /* 优先级 */
                  TaskHandle_t *const taskHandler /* 任务句柄 */)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08c      	sub	sp, #48	; 0x30
 8000ca0:	af04      	add	r7, sp, #16
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	603b      	str	r3, [r7, #0]
    TCB_t *tcb = NULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    Long_t rlt = -1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	61bb      	str	r3, [r7, #24]
如果栈向上生长，先给tcb分配空间，再给stack分配空间 */
#if (STACK_GROWTH == STACK_GROWTH_DOWN)
    {
        Stack_t *stack;

        willingAssert( stackSize >= MIN_TCB_STACK_SIZE );
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b17      	cmp	r3, #23
 8000cb8:	d804      	bhi.n	8000cc4 <createTask+0x28>
 8000cba:	2254      	movs	r2, #84	; 0x54
 8000cbc:	491b      	ldr	r1, [pc, #108]	; (8000d2c <createTask+0x90>)
 8000cbe:	481c      	ldr	r0, [pc, #112]	; (8000d30 <createTask+0x94>)
 8000cc0:	f000 fe0e 	bl	80018e0 <iprintf>
        stack = (Stack_t *)willingMalloc(((size_t)stackSize) * sizeof(Stack_t));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff17 	bl	8000afc <willingMalloc>
 8000cce:	6178      	str	r0, [r7, #20]

        if (stack != NULL)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00d      	beq.n	8000cf2 <createTask+0x56>
        {
            tcb = (TCB_t *)willingMalloc(sizeof(TCB_t));
 8000cd6:	2024      	movs	r0, #36	; 0x24
 8000cd8:	f7ff ff10 	bl	8000afc <willingMalloc>
 8000cdc:	61f8      	str	r0, [r7, #28]

            if (tcb != NULL)
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <createTask+0x50>
            {
                tcb->stack = stack;
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	e002      	b.n	8000cf2 <createTask+0x56>
            }
            else
            {
                willingFree(stack);
 8000cec:	6978      	ldr	r0, [r7, #20]
 8000cee:	f7ff ff21 	bl	8000b34 <willingFree>
#else
    { /* STACK_GROWTH */
    }
#endif /* STACK_GROWTH */

    if (tcb != NULL)
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d011      	beq.n	8000d1c <createTask+0x80>
    {
        initTask(taskFunc, taskName, stackSize, params, priority, tcb, taskHandler);
 8000cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfa:	9302      	str	r3, [sp, #8]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	68f8      	ldr	r0, [r7, #12]
 8000d0c:	f000 f812 	bl	8000d34 <initTask>
        addTaskToReadyArray(tcb);
 8000d10:	69f8      	ldr	r0, [r7, #28]
 8000d12:	f000 f869 	bl	8000de8 <addTaskToReadyArray>
        rlt = wPASS;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
 8000d1a:	e002      	b.n	8000d22 <createTask+0x86>
    }
    else
    {
        rlt = errMEMORY_ALLOCATE_FAIL;
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	61bb      	str	r3, [r7, #24]
    }
    return rlt;
 8000d22:	69bb      	ldr	r3, [r7, #24]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	0800250c 	.word	0x0800250c
 8000d30:	08002524 	.word	0x08002524

08000d34 <initTask>:
                     const uint32_t stackSize,
                     void *const params,
                     UBase_t priority,
                     TCB_t *tcb,
                     TaskHandle_t *const taskHandler)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	603b      	str	r3, [r7, #0]
    Stack_t *topOfStack = NULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
    UBase_t i = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]

#if (STACK_GROWTH == STACK_GROWTH_DOWN)
    {
        topOfStack = tcb->stack + (stackSize - (uint32_t)1);
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d54:	3b01      	subs	r3, #1
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
    { /* STACK_GROWTH */
    }
#endif /* STACK_GROWTH */

    /* 拷贝taskName */
    for (i = (UBase_t)0; i < (UBase_t)MAX_TASK_NAME_LEN; i++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e012      	b.n	8000d88 <initTask+0x54>
    {
        tcb->taskName[i] = taskName[i];
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	4413      	add	r3, r2
 8000d68:	7819      	ldrb	r1, [r3, #0]
 8000d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	4413      	add	r3, r2
 8000d70:	3311      	adds	r3, #17
 8000d72:	460a      	mov	r2, r1
 8000d74:	701a      	strb	r2, [r3, #0]
        if (taskName[i] == 0x00)
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d006      	beq.n	8000d90 <initTask+0x5c>
    for (i = (UBase_t)0; i < (UBase_t)MAX_TASK_NAME_LEN; i++)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	2b0f      	cmp	r3, #15
 8000d8c:	d9e9      	bls.n	8000d62 <initTask+0x2e>
 8000d8e:	e000      	b.n	8000d92 <initTask+0x5e>
        {
            break;
 8000d90:	bf00      	nop
        {
            //
        }
    }

    tcb->taskName[MAX_TASK_NAME_LEN - 1] = 0x00;
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2020 	strb.w	r2, [r3, #32]

    /* 赋值priority */
    if (priority >= (UBase_t)MAX_PRIORITY_NUM)
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	2b1f      	cmp	r3, #31
 8000d9e:	d903      	bls.n	8000da8 <initTask+0x74>
    {
        tcb->priority = (UBase_t)MAX_PRIORITY_NUM - (UBase_t)1U;
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	221f      	movs	r2, #31
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	e002      	b.n	8000dae <initTask+0x7a>
    }
    else
    {
        tcb->priority = priority;
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	6a3a      	ldr	r2, [r7, #32]
 8000dac:	609a      	str	r2, [r3, #8]
    }

    tcb->delayExpireAt = DELAY_VALUE_NO_DELAY;
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
    tcb->tickCountSession = tickCountSession;
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <initTask+0xb0>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	741a      	strb	r2, [r3, #16]

    tcb->stackTop = initStack(topOfStack, taskFunc, params);
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	68f9      	ldr	r1, [r7, #12]
 8000dc2:	6938      	ldr	r0, [r7, #16]
 8000dc4:	f7ff fd5c 	bl	8000880 <initStack>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	601a      	str	r2, [r3, #0]

    if ((void *)taskHandler != NULL)
 8000dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <initTask+0xa6>
    {
        *taskHandler = (TaskHandle_t)tcb;
 8000dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        /* 错误处理 */
    }
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000098 	.word	0x20000098

08000de8 <addTaskToReadyArray>:

/* 用于测试任务调度，暂时未加临界区，当三个任务都加入到数组后开启调度器 */
static void addTaskToReadyArray(TCB_t *tcb)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
    UBase_t nums = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
    ListItem_t *item = (ListItem_t *)willingMalloc(sizeof(ListItem_t));
 8000df4:	2018      	movs	r0, #24
 8000df6:	f7ff fe81 	bl	8000afc <willingMalloc>
 8000dfa:	60b8      	str	r0, [r7, #8]
    item->tcbWith = tcb;
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	609a      	str	r2, [r3, #8]
    item->listWith = &sysReadyTaskList;
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <addTaskToReadyArray+0x5c>)
 8000e06:	60da      	str	r2, [r3, #12]

    nums = insertWillingList_Behind(&sysReadyTaskList, sysReadyTaskList.tail, item);
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <addTaskToReadyArray+0x5c>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <addTaskToReadyArray+0x5c>)
 8000e12:	f7ff fc35 	bl	8000680 <insertWillingList_Behind>
 8000e16:	60f8      	str	r0, [r7, #12]
    willingAssert(nums);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d104      	bne.n	8000e28 <addTaskToReadyArray+0x40>
 8000e1e:	22c0      	movs	r2, #192	; 0xc0
 8000e20:	4909      	ldr	r1, [pc, #36]	; (8000e48 <addTaskToReadyArray+0x60>)
 8000e22:	480a      	ldr	r0, [pc, #40]	; (8000e4c <addTaskToReadyArray+0x64>)
 8000e24:	f000 fd5c 	bl	80018e0 <iprintf>

    if (currentTCB == NULL)
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <addTaskToReadyArray+0x68>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d105      	bne.n	8000e3c <addTaskToReadyArray+0x54>
    {
        currentTaskItem = item;
 8000e30:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <addTaskToReadyArray+0x6c>)
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	6013      	str	r3, [r2, #0]
        currentTCB = tcb;
 8000e36:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <addTaskToReadyArray+0x68>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6013      	str	r3, [r2, #0]
    }
}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2000009c 	.word	0x2000009c
 8000e48:	0800250c 	.word	0x0800250c
 8000e4c:	08002524 	.word	0x08002524
 8000e50:	200000b8 	.word	0x200000b8
 8000e54:	200000b4 	.word	0x200000b4

08000e58 <sysTickService>:
/*
    系统时钟服务函数，
    调度算法函数在这个函数中调用
*/
Base_t sysTickService(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
    Base_t needSwitchCtx = wFALSE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
    ListItem_t *itemToRun = NULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
    ListItem_t *itemItr = sysReadyTaskList.head;
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <sysTickService+0x94>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	60fb      	str	r3, [r7, #12]
    Base_t currentTCBAlive = wFALSE; // 当前任务是否在就绪表中
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]

    willingAssert(sysReadyTaskList.itemNum);
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <sysTickService+0x94>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d104      	bne.n	8000e82 <sysTickService+0x2a>
 8000e78:	22d4      	movs	r2, #212	; 0xd4
 8000e7a:	491d      	ldr	r1, [pc, #116]	; (8000ef0 <sysTickService+0x98>)
 8000e7c:	481d      	ldr	r0, [pc, #116]	; (8000ef4 <sysTickService+0x9c>)
 8000e7e:	f000 fd2f 	bl	80018e0 <iprintf>
         其他：不切换
    */

    do
    {
        TCB_t *tcbItr = (TCB_t *)(itemItr->tcbWith);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	607b      	str	r3, [r7, #4]

        if (tcbItr == currentTCB)
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <sysTickService+0xa0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d102      	bne.n	8000e98 <sysTickService+0x40>
        {
            currentTCBAlive = wTRUE;
 8000e92:	2301      	movs	r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	e00b      	b.n	8000eb0 <sysTickService+0x58>
        }
        else
        {
            if (itemToRun == NULL && tcbItr->priority >= currentTCB->priority)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d108      	bne.n	8000eb0 <sysTickService+0x58>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <sysTickService+0xa0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d301      	bcc.n	8000eb0 <sysTickService+0x58>
            {
                itemToRun = itemItr;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	613b      	str	r3, [r7, #16]
            }
        }

        //  todo：对于多次tick的都没有被调用的任务，进行优先级提升

        itemItr = itemItr->next;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
    } while (itemItr != NULL);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1e2      	bne.n	8000e82 <sysTickService+0x2a>

    if (currentTCBAlive == wTRUE)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d108      	bne.n	8000ed4 <sysTickService+0x7c>
    {
        if (itemToRun != NULL)
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00b      	beq.n	8000ee0 <sysTickService+0x88>
        { // todo： 这里适配了sleep的情况？对于timer的情况，这里判断不对，因为timer没有被挂起，所以所alive的，进来之后itemToRun为空，导致认为不需要调度，函数退出后assert失败，所以可能不需要assert
            nextTaskItem = itemToRun;
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	; (8000efc <sysTickService+0xa4>)
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	6013      	str	r3, [r2, #0]
            needSwitchCtx = wTRUE;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	e005      	b.n	8000ee0 <sysTickService+0x88>
        }
    }
    else
    {
        nextTaskItem = sysReadyTaskList.head;
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <sysTickService+0x94>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	4a08      	ldr	r2, [pc, #32]	; (8000efc <sysTickService+0xa4>)
 8000eda:	6013      	str	r3, [r2, #0]
        needSwitchCtx = wTRUE;
 8000edc:	2301      	movs	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
    }

    return needSwitchCtx;
 8000ee0:	697b      	ldr	r3, [r7, #20]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000009c 	.word	0x2000009c
 8000ef0:	0800250c 	.word	0x0800250c
 8000ef4:	08002524 	.word	0x08002524
 8000ef8:	200000b8 	.word	0x200000b8
 8000efc:	200000bc 	.word	0x200000bc

08000f00 <getSchedulerState>:

Base_t getSchedulerState(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
    Base_t rlt = SCHEDULER_STATE_RUNNING;
 8000f06:	2302      	movs	r3, #2
 8000f08:	607b      	str	r3, [r7, #4]

    /* todo: 完成具体实现 */
    if (schedulerRunning == wFALSE)
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <getSchedulerState+0x44>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d102      	bne.n	8000f18 <getSchedulerState+0x18>
    {
        rlt = SCHEDULER_STATE_WAITING;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	e00f      	b.n	8000f38 <getSchedulerState+0x38>
    }
    else
    {
        if (schedulerSuspended == wFALSE)
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <getSchedulerState+0x48>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d109      	bne.n	8000f34 <getSchedulerState+0x34>
        {
            if (sysReadyTaskList.itemNum == 0)
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <getSchedulerState+0x4c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <getSchedulerState+0x2e>
            { // todo: 确认这样做是否可行，没有任务在跑系统是否能持续运转？或者一直在跑当前要停掉的任务？极大可能这段代码要删掉，改成插入一个idle任务
                rlt = SCHEDULER_STATE_SUSPENDED;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	e004      	b.n	8000f38 <getSchedulerState+0x38>
            }
            else
            {
                rlt = SCHEDULER_STATE_RUNNING;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	e001      	b.n	8000f38 <getSchedulerState+0x38>
            }
        }
        else
        {
            rlt = SCHEDULER_STATE_SUSPENDED;
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
        }
    }

    return rlt;
 8000f38:	687b      	ldr	r3, [r7, #4]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	2000008c 	.word	0x2000008c
 8000f48:	20000090 	.word	0x20000090
 8000f4c:	2000009c 	.word	0x2000009c

08000f50 <taskSwitchContext>:

void taskSwitchContext(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    // 将curTcb指向下一个就绪的任务控制块
    willingAssert(sysReadyTaskList.itemNum > 0);
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <taskSwitchContext+0x3c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d105      	bne.n	8000f68 <taskSwitchContext+0x18>
 8000f5c:	f240 123d 	movw	r2, #317	; 0x13d
 8000f60:	490b      	ldr	r1, [pc, #44]	; (8000f90 <taskSwitchContext+0x40>)
 8000f62:	480c      	ldr	r0, [pc, #48]	; (8000f94 <taskSwitchContext+0x44>)
 8000f64:	f000 fcbc 	bl	80018e0 <iprintf>

    if (nextTaskItem != NULL)
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <taskSwitchContext+0x48>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <taskSwitchContext+0x38>
    {
        currentTaskItem = nextTaskItem;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <taskSwitchContext+0x48>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <taskSwitchContext+0x4c>)
 8000f76:	6013      	str	r3, [r2, #0]
        nextTaskItem = NULL;
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <taskSwitchContext+0x48>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
        currentTCB = currentTaskItem->tcbWith;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <taskSwitchContext+0x4c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <taskSwitchContext+0x50>)
 8000f86:	6013      	str	r3, [r2, #0]

    // currentItem = getWillingListNextItem_Circle( &readyTaskList, currentItem );
    // willingAssert( currentItem );

    // currentTCB = currentItem->tcbWith;
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000009c 	.word	0x2000009c
 8000f90:	0800250c 	.word	0x0800250c
 8000f94:	08002524 	.word	0x08002524
 8000f98:	200000bc 	.word	0x200000bc
 8000f9c:	200000b4 	.word	0x200000b4
 8000fa0:	200000b8 	.word	0x200000b8

08000fa4 <idleTask>:

void idleTask(void *param)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    while (1)
 8000fac:	e7fe      	b.n	8000fac <idleTask+0x8>
	...

08000fb0 <OSStart>:
        ;
    }
}

void OSStart(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af02      	add	r7, sp, #8

    DISABLE_INTERRUPTS();
 8000fb6:	f7ff fe5f 	bl	8000c78 <maximizeBasePriority>

	#ifdef USE_WILLING_SYS_TIMER
    createTask((TaskFunc_t)timerTask,
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <OSStart+0x54>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	231f      	movs	r3, #31
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	2218      	movs	r2, #24
 8000fc8:	490f      	ldr	r1, [pc, #60]	; (8001008 <OSStart+0x58>)
 8000fca:	4810      	ldr	r0, [pc, #64]	; (800100c <OSStart+0x5c>)
 8000fcc:	f7ff fe66 	bl	8000c9c <createTask>
               (uint32_t)24,
               (void *)NULL,
               (UBase_t)MAX_PRIORITY_VALUE,
               (TaskHandle_t *)timerTaskHandler);

    timerTaskItem = sysReadyTaskList.tail;  // 因为系统中只有一个timerTask，为了避免循环查找，直接记录其值就好
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <OSStart+0x60>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <OSStart+0x64>)
 8000fd6:	6013      	str	r3, [r2, #0]
	#endif

    // idleTask，由于优先级比较低，所以当有其他任务的时候，idletask是不会被执行的
    createTask((TaskFunc_t)idleTask,
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <OSStart+0x68>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2218      	movs	r2, #24
 8000fe6:	490d      	ldr	r1, [pc, #52]	; (800101c <OSStart+0x6c>)
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <OSStart+0x70>)
 8000fea:	f7ff fe57 	bl	8000c9c <createTask>
               (uint32_t)24,
               (void *)NULL,
               (UBase_t)MIN_PRIORITY_VALUE,
               (TaskHandle_t *)idleTaskHandler);

    schedulerRunning = wTRUE;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <OSStart+0x74>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
    tickCount = 0U;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <OSStart+0x78>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]

    if (startWillingScheduler() != wFALSE)
 8000ffa:	f7ff fcb3 	bl	8000964 <startWillingScheduler>
    {
    }
    else
    {
    }
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200000c4 	.word	0x200000c4
 8001008:	08002534 	.word	0x08002534
 800100c:	08001285 	.word	0x08001285
 8001010:	2000009c 	.word	0x2000009c
 8001014:	200000c8 	.word	0x200000c8
 8001018:	200000c0 	.word	0x200000c0
 800101c:	08002540 	.word	0x08002540
 8001020:	08000fa5 	.word	0x08000fa5
 8001024:	2000008c 	.word	0x2000008c
 8001028:	20000094 	.word	0x20000094

0800102c <calculateTickCount_ms>:
void OSStop(void)
{
}

uint8_t calculateTickCount_ms(uint32_t nms, uint32_t *ticksWait)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
    uint32_t ticks = (nms * SYS_TICK_RATE) / 1000;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2264      	movs	r2, #100	; 0x64
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <calculateTickCount_ms+0x64>)
 8001040:	fba2 2303 	umull	r2, r3, r2, r3
 8001044:	099b      	lsrs	r3, r3, #6
 8001046:	60bb      	str	r3, [r7, #8]
    uint8_t session = tickCountSession;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <calculateTickCount_ms+0x68>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	73fb      	strb	r3, [r7, #15]
    if (ticksWait == NULL)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <calculateTickCount_ms+0x2c>
    {
        return 0;
 8001054:	2300      	movs	r3, #0
 8001056:	e015      	b.n	8001084 <calculateTickCount_ms+0x58>
    }

    *ticksWait = tickCount + ticks;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <calculateTickCount_ms+0x6c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	441a      	add	r2, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	601a      	str	r2, [r3, #0]
    if (*ticksWait < tickCount)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <calculateTickCount_ms+0x6c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d208      	bcs.n	8001082 <calculateTickCount_ms+0x56>
    {
        session = !tickCountSession;
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <calculateTickCount_ms+0x68>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf0c      	ite	eq
 800107a:	2301      	moveq	r3, #1
 800107c:	2300      	movne	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	73fb      	strb	r3, [r7, #15]
    }

    return session;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	10624dd3 	.word	0x10624dd3
 8001094:	20000098 	.word	0x20000098
 8001098:	20000094 	.word	0x20000094

0800109c <willingSleep_ms>:

// 单位ms
void willingSleep_ms(uint32_t n)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    // uint32_t ticks = ( n * SYS_TICK_RATE ) / 1000; // n / ( 1000 / SYS_TICK_RATE )
    uint32_t ticks = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
    uint8_t session = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
    // UBase_t rlt = 0;

    // suspendScheduler();

    session = calculateTickCount_ms(n, &ticks);
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	4619      	mov	r1, r3
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffba 	bl	800102c <calculateTickCount_ms>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73fb      	strb	r3, [r7, #15]

    willingSleep_ticks(ticks, session);
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	461a      	mov	r2, r3
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	4619      	mov	r1, r3
 80010c4:	4610      	mov	r0, r2
 80010c6:	f000 f805 	bl	80010d4 <willingSleep_ticks>
    //     rlt = insertWillingList_SortASC( &suspendTaskList,  currentTaskItem );
    //     willingAssert(rlt);
    //     // currentTaskItem = next;

    // resumeScheduler();
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <willingSleep_ticks>:

void willingSleep_ticks(int32_t ticks, uint8_t tickSession)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
    UBase_t rlt = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]

    suspendScheduler();
 80010e4:	f000 f83c 	bl	8001160 <suspendScheduler>

    currentTCB->tickCountSession = tickSession;
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <willingSleep_ticks+0x74>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	78fa      	ldrb	r2, [r7, #3]
 80010ee:	741a      	strb	r2, [r3, #16]
    currentTCB->delayExpireAt = ticks;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <willingSleep_ticks+0x74>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	60da      	str	r2, [r3, #12]

    currentTaskItem->sortValue = currentTCB->delayExpireAt;
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <willingSleep_ticks+0x74>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <willingSleep_ticks+0x78>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68d2      	ldr	r2, [r2, #12]
 8001102:	611a      	str	r2, [r3, #16]
    currentTaskItem->tickCountSession = currentTCB->tickCountSession;
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <willingSleep_ticks+0x74>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <willingSleep_ticks+0x78>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	7c12      	ldrb	r2, [r2, #16]
 800110e:	751a      	strb	r2, [r3, #20]

    removeWillingListItem(&sysReadyTaskList, currentTaskItem);
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <willingSleep_ticks+0x78>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	480e      	ldr	r0, [pc, #56]	; (8001150 <willingSleep_ticks+0x7c>)
 8001118:	f7ff fb17 	bl	800074a <removeWillingListItem>
    rlt = insertWillingList_SortASC(&sysSuspendTaskList, currentTaskItem);
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <willingSleep_ticks+0x78>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	480c      	ldr	r0, [pc, #48]	; (8001154 <willingSleep_ticks+0x80>)
 8001124:	f7ff fa0c 	bl	8000540 <insertWillingList_SortASC>
 8001128:	60f8      	str	r0, [r7, #12]
    willingAssert(rlt);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d105      	bne.n	800113c <willingSleep_ticks+0x68>
 8001130:	f240 12d3 	movw	r2, #467	; 0x1d3
 8001134:	4908      	ldr	r1, [pc, #32]	; (8001158 <willingSleep_ticks+0x84>)
 8001136:	4809      	ldr	r0, [pc, #36]	; (800115c <willingSleep_ticks+0x88>)
 8001138:	f000 fbd2 	bl	80018e0 <iprintf>

    resumeScheduler();
 800113c:	f000 f81e 	bl	800117c <resumeScheduler>
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200000b8 	.word	0x200000b8
 800114c:	200000b4 	.word	0x200000b4
 8001150:	2000009c 	.word	0x2000009c
 8001154:	200000a8 	.word	0x200000a8
 8001158:	0800250c 	.word	0x0800250c
 800115c:	08002524 	.word	0x08002524

08001160 <suspendScheduler>:

void suspendScheduler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
    ++schedulerSuspended;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <suspendScheduler+0x18>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a03      	ldr	r2, [pc, #12]	; (8001178 <suspendScheduler+0x18>)
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000090 	.word	0x20000090

0800117c <resumeScheduler>:

UBase_t resumeScheduler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    if (schedulerSuspended > 0)
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <resumeScheduler+0x38>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	dd04      	ble.n	8001192 <resumeScheduler+0x16>
    {
        --schedulerSuspended;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <resumeScheduler+0x38>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3b01      	subs	r3, #1
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <resumeScheduler+0x38>)
 8001190:	6013      	str	r3, [r2, #0]
    }

    if (schedulerSuspended == 0)
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <resumeScheduler+0x38>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d108      	bne.n	80011ac <resumeScheduler+0x30>
    { // 开启调度，保证函数可重入
        //  产生一个PendSV中断
        // willingAssert( sysTickService() == wTRUE ); // todo： 用assert会导致timer那边出问题,todo:调试sleep
        if (sysTickService() == wTRUE)
 800119a:	f7ff fe5d 	bl	8000e58 <sysTickService>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d103      	bne.n	80011ac <resumeScheduler+0x30>
        {
            NVIC_INTERRUPUT_CTRL_REG = NVIC_PENDSV_SET_BIT;
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <resumeScheduler+0x3c>)
 80011a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011aa:	601a      	str	r2, [r3, #0]
        }
    }

    return schedulerSuspended;
 80011ac:	4b01      	ldr	r3, [pc, #4]	; (80011b4 <resumeScheduler+0x38>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000090 	.word	0x20000090
 80011b8:	e000ed04 	.word	0xe000ed04

080011bc <processDelay>:

void processDelay(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
    ListItem_t *item = getWillingListHeadItem(&sysSuspendTaskList);
 80011c2:	4816      	ldr	r0, [pc, #88]	; (800121c <processDelay+0x60>)
 80011c4:	f7ff fab1 	bl	800072a <getWillingListHeadItem>
 80011c8:	6078      	str	r0, [r7, #4]
    TCB_t *tcb = NULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]

    while (item != NULL)
 80011ce:	e01c      	b.n	800120a <processDelay+0x4e>
    {
        tcb = item->tcbWith;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	603b      	str	r3, [r7, #0]
        if (tcb->tickCountSession == tickCountSession && tcb->delayExpireAt <= tickCount)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	7c1a      	ldrb	r2, [r3, #16]
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <processDelay+0x64>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d10d      	bne.n	8001200 <processDelay+0x44>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <processDelay+0x68>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d807      	bhi.n	8001200 <processDelay+0x44>
        {
            removeWillingListItem(&sysSuspendTaskList, item);
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	480a      	ldr	r0, [pc, #40]	; (800121c <processDelay+0x60>)
 80011f4:	f7ff faa9 	bl	800074a <removeWillingListItem>
            insertWillingList_Head(&sysReadyTaskList, item);
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	480b      	ldr	r0, [pc, #44]	; (8001228 <processDelay+0x6c>)
 80011fc:	f7ff fa0c 	bl	8000618 <insertWillingList_Head>
        }

        item = getWillingListNextItem(&sysSuspendTaskList, item);
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <processDelay+0x60>)
 8001204:	f7ff fa78 	bl	80006f8 <getWillingListNextItem>
 8001208:	6078      	str	r0, [r7, #4]
    while (item != NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1df      	bne.n	80011d0 <processDelay+0x14>
    }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000a8 	.word	0x200000a8
 8001220:	20000098 	.word	0x20000098
 8001224:	20000094 	.word	0x20000094
 8001228:	2000009c 	.word	0x2000009c

0800122c <initKernel>:

void initKernel(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
    sysReadyTaskList.head = NULL;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <initKernel+0x44>)
 8001232:	2200      	movs	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
    sysReadyTaskList.tail = NULL;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <initKernel+0x44>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
    sysReadyTaskList.itemNum = 0;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <initKernel+0x44>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]

    sysSuspendTaskList.head = NULL;
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <initKernel+0x48>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
    sysSuspendTaskList.tail = NULL;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <initKernel+0x48>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
    sysSuspendTaskList.itemNum = 0;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <initKernel+0x48>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]

    tickCountSession = 0;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <initKernel+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
    tickCount = 0;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <initKernel+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

	#ifdef USE_WILLING_SYS_TIMER
    timerTaskItem = NULL;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <initKernel+0x54>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
	#endif
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2000009c 	.word	0x2000009c
 8001274:	200000a8 	.word	0x200000a8
 8001278:	20000098 	.word	0x20000098
 800127c:	20000094 	.word	0x20000094
 8001280:	200000c8 	.word	0x200000c8

08001284 <timerTask>:
// 那么是否有必要在resume的时候切换一次呢？
// 又为什么会在sleep之后timeOutSet的值会变呢？
// 20240110:今天调试的结果是timeOutSet变成了0，发生位置是pendSVHandler  stmdb r0!, {r4-r11},已明确，是因为stackTop地址溢出，跟timerCmd->timeOutIntervalSet地址重合
// bug原因：因为tcb的stack分配的空间小了（20），而stack中要保存初始化的值，占16word，实际切换的时候使用8word，所以是24word，超出的4个word正好溢出到了timercmd->set上
void timerTask(void *param)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    // 查找超时的cmd进行调用
    // 如果是循环调用的cmd，重设延时值，从队列删除cmd，重新插入（重排序）
    // 查找下一个cmd，调整timerTask的sleep值，当前timerTask正在执行，因此sleep就可以了

    ListItem_t *cmdItem = timerCmdList.head;
 800128c:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <timerTask+0x100>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	617b      	str	r3, [r7, #20]
    TimerCommand_t *timerCmd = NULL;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
    for (;;)
    {
        if (cmdItem == NULL)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d104      	bne.n	80012a6 <timerTask+0x22>
        {
            willingSleep_ms(TIMER_IDLE_DELAY_VALUE);
 800129c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a0:	f7ff fefc 	bl	800109c <willingSleep_ms>
 80012a4:	e7f7      	b.n	8001296 <timerTask+0x12>
        }
        else
        {
            willingAssert(cmdItem);
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d104      	bne.n	80012b6 <timerTask+0x32>
 80012ac:	2253      	movs	r2, #83	; 0x53
 80012ae:	4936      	ldr	r1, [pc, #216]	; (8001388 <timerTask+0x104>)
 80012b0:	4836      	ldr	r0, [pc, #216]	; (800138c <timerTask+0x108>)
 80012b2:	f000 fb15 	bl	80018e0 <iprintf>
            timerCmd = (TimerCommand_t *)(cmdItem->tcbWith);
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	613b      	str	r3, [r7, #16]

            if (timerCmd->tickCountSession == tickCountSession && timerCmd->timeOutAt <= tickCount)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	795b      	ldrb	r3, [r3, #5]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b33      	ldr	r3, [pc, #204]	; (8001390 <timerTask+0x10c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d14f      	bne.n	800136c <timerTask+0xe8>
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <timerTask+0x110>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d849      	bhi.n	800136c <timerTask+0xe8>
            {
                suspendScheduler();
 80012d8:	f7ff ff42 	bl	8001160 <suspendScheduler>

                timerCmd->timerCmd(timerCmd->param); // 执行命令
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	6912      	ldr	r2, [r2, #16]
 80012e4:	4610      	mov	r0, r2
 80012e6:	4798      	blx	r3

                removeWillingListItem(&timerCmdList, cmdItem);
 80012e8:	6979      	ldr	r1, [r7, #20]
 80012ea:	4826      	ldr	r0, [pc, #152]	; (8001384 <timerTask+0x100>)
 80012ec:	f7ff fa2d 	bl	800074a <removeWillingListItem>
                if (timerCmd->timerMod == TIMER_MOD_REPEAT)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	791b      	ldrb	r3, [r3, #4]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d12d      	bne.n	8001354 <timerTask+0xd0>
                {
                    // 直接在timerCmd上次超时上加，保证每次执行的interval是一样的，但是当超时过短（比任务执行时间短）时有可能产生任务堆积
                    // todo: 考虑改成基于系统的tickCount和tickCountSession计算
                    uint32_t timeOutAt = timerCmd->timeOutAt + timerCmd->timeOutIntervalSet;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4413      	add	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
                    if (timeOutAt < timerCmd->timeOutAt)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	429a      	cmp	r2, r3
 800130c:	d20f      	bcs.n	800132e <timerTask+0xaa>
                    {
                        timerCmd->tickCountSession = !(timerCmd->tickCountSession);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	795b      	ldrb	r3, [r3, #5]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf0c      	ite	eq
 8001318:	2301      	moveq	r3, #1
 800131a:	2300      	movne	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	715a      	strb	r2, [r3, #5]
                        cmdItem->tickCountSession = timerCmd->tickCountSession;
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	795b      	ldrb	r3, [r3, #5]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	751a      	strb	r2, [r3, #20]
                    }
                    timerCmd->timeOutAt = timeOutAt;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	609a      	str	r2, [r3, #8]
                    cmdItem->sortValue = timeOutAt;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	611a      	str	r2, [r3, #16]

                    willingAssert(insertWillingList_SortASC(&timerCmdList, cmdItem));
 800133a:	6979      	ldr	r1, [r7, #20]
 800133c:	4811      	ldr	r0, [pc, #68]	; (8001384 <timerTask+0x100>)
 800133e:	f7ff f8ff 	bl	8000540 <insertWillingList_SortASC>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10b      	bne.n	8001360 <timerTask+0xdc>
 8001348:	226a      	movs	r2, #106	; 0x6a
 800134a:	490f      	ldr	r1, [pc, #60]	; (8001388 <timerTask+0x104>)
 800134c:	480f      	ldr	r0, [pc, #60]	; (800138c <timerTask+0x108>)
 800134e:	f000 fac7 	bl	80018e0 <iprintf>
 8001352:	e005      	b.n	8001360 <timerTask+0xdc>
                } else {
                    // 释放cmd和item
										willingFree(timerCmd);
 8001354:	6938      	ldr	r0, [r7, #16]
 8001356:	f7ff fbed 	bl	8000b34 <willingFree>
										willingFree(cmdItem);
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff fbea 	bl	8000b34 <willingFree>
                }

                resumeScheduler();
 8001360:	f7ff ff0c 	bl	800117c <resumeScheduler>
                cmdItem = timerCmdList.head; // 每次都拿第一个timerCmd来执行，因为有做排序，定时大的都在后面 todo: 确认是不是这一句写在了resumeScheduler外面导致的问题，因为前面有可能已经进行了上下文切换
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <timerTask+0x100>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e009      	b.n	8001380 <timerTask+0xfc>
                                                                    // 应该不是这个问题，因为当前就绪队列中只有timer和idle两个task，timerTask没有sleep，所以不会发生上下文切换，但是还是测试一下试试看
            }
            else
            {
                willingSleep_ticks(timerCmd->timeOutAt, timerCmd->tickCountSession);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	461a      	mov	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	795b      	ldrb	r3, [r3, #5]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	4610      	mov	r0, r2
 800137c:	f7ff feaa 	bl	80010d4 <willingSleep_ticks>
        if (cmdItem == NULL)
 8001380:	e789      	b.n	8001296 <timerTask+0x12>
 8001382:	bf00      	nop
 8001384:	200000cc 	.word	0x200000cc
 8001388:	0800254c 	.word	0x0800254c
 800138c:	08002568 	.word	0x08002568
 8001390:	20000098 	.word	0x20000098
 8001394:	20000094 	.word	0x20000094

08001398 <main>:
   LED1 = led1Stat;
}


int main()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af02      	add	r7, sp, #8
   // 		LED2=!LED2;
   // 		delay(6000000);
   // 	}

   OSErr err;
   initWilling(&err);
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fc39 	bl	8000c18 <initWilling>
   initLed();
 80013a6:	f7ff f8a1 	bl	80004ec <initLed>

   LED1 = led1Stat;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <main+0x54>)
 80013ac:	881a      	ldrh	r2, [r3, #0]
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <main+0x58>)
 80013b0:	601a      	str	r2, [r3, #0]
   LED2 = led2Stat;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <main+0x5c>)
 80013b4:	881a      	ldrh	r2, [r3, #0]
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <main+0x60>)
 80013b8:	601a      	str	r2, [r3, #0]
       ;
    }
*/

   // 创建任务
   ENTER_CRITICAL_SECTION();
 80013ba:	f7ff faf5 	bl	80009a8 <enterCriticalSection>
// todo: 定时器时间不对，可能也跟timerTask函数有关



/* bug:202401102317,timer调通了，task挂了*/
      createTask( (TaskFunc_t) lightLed1,
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <main+0x64>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	2314      	movs	r3, #20
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	2218      	movs	r2, #24
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <main+0x68>)
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <main+0x6c>)
 80013d0:	f7ff fc64 	bl	8000c9c <createTask>
   //             (uint32_t  ) 50,
   //             (void *) NULL,
   //             (UBase_t) SUGGESTED_PRIORITY,
   //             (TaskHandle_t *)shutLedsHandler);

   EXIT_CRITICAL_SECTION();
 80013d4:	f7ff fb08 	bl	80009e8 <exitCriticalSection>

   willingStart(&err);
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fc42 	bl	8000c64 <willingStart>

   return 0;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000084 	.word	0x20000084
 80013f0:	42218194 	.word	0x42218194
 80013f4:	20000000 	.word	0x20000000
 80013f8:	42230194 	.word	0x42230194
 80013fc:	200000d8 	.word	0x200000d8
 8001400:	08002578 	.word	0x08002578
 8001404:	080004b5 	.word	0x080004b5

08001408 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	e00a      	b.n	8001430 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800141a:	f3af 8000 	nop.w
 800141e:	4601      	mov	r1, r0
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	60ba      	str	r2, [r7, #8]
 8001426:	b2ca      	uxtb	r2, r1
 8001428:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3301      	adds	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	dbf0      	blt.n	800141a <_read+0x12>
  }

  return len;
 8001438:	687b      	ldr	r3, [r7, #4]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	e009      	b.n	8001468 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbf1      	blt.n	8001454 <_write+0x12>
  }
  return len;
 8001470:	687b      	ldr	r3, [r7, #4]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <_close>:

int _close(int file)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a0:	605a      	str	r2, [r3, #4]
  return 0;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <_isatty>:

int _isatty(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b085      	sub	sp, #20
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	60f8      	str	r0, [r7, #12]
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
	...

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e4:	4a14      	ldr	r2, [pc, #80]	; (8001538 <_sbrk+0x5c>)
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <_sbrk+0x60>)
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <_sbrk+0x64>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <_sbrk+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	d207      	bcs.n	800151c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800150c:	f000 fa9c 	bl	8001a48 <__errno>
 8001510:	4603      	mov	r3, r0
 8001512:	220c      	movs	r2, #12
 8001514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	e009      	b.n	8001530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <_sbrk+0x64>)
 800152c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20010000 	.word	0x20010000
 800153c:	00000400 	.word	0x00000400
 8001540:	200000dc 	.word	0x200000dc
 8001544:	20000230 	.word	0x20000230

08001548 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001558:	e7fe      	b.n	8001558 <HardFault_Handler+0x4>

0800155a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800155e:	e7fe      	b.n	800155e <MemManage_Handler+0x4>

08001560 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001564:	e7fe      	b.n	8001564 <BusFault_Handler+0x4>

08001566 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800156a:	e7fe      	b.n	800156a <UsageFault_Handler+0x4>

0800156c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:
//void PendSV_Handler(void)
//{
//}


void SysTick_Handler( void ) {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	led2Stat = !led2Stat;
	
	LED1 = led1Stat;
	LED2 = led2Stat;*/

   if ( getSchedulerState() != SCHEDULER_STATE_WAITING ) {
 800157c:	f7ff fcc0 	bl	8000f00 <getSchedulerState>
 8001580:	4603      	mov	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	d001      	beq.n	800158a <SysTick_Handler+0x12>
        sysTickHandler();
 8001586:	f7ff f9a7 	bl	80008d8 <sysTickHandler>
    }	
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001592:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001594:	f7fe fdec 	bl	8000170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <LoopForever+0x6>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	; (80015d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <LoopForever+0xe>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	; (80015dc <LoopForever+0x16>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015be:	f000 fa49 	bl	8001a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015c2:	f7ff fee9 	bl	8001398 <main>

080015c6 <LoopForever>:

LoopForever:
  b LoopForever
 80015c6:	e7fe      	b.n	80015c6 <LoopForever>
  ldr   r0, =_estack
 80015c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015d4:	080025c0 	.word	0x080025c0
  ldr r2, =_sbss
 80015d8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015dc:	2000022c 	.word	0x2000022c

080015e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_2_IRQHandler>
	...

080015e4 <malloc>:
 80015e4:	4b02      	ldr	r3, [pc, #8]	; (80015f0 <malloc+0xc>)
 80015e6:	4601      	mov	r1, r0
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	f000 b82b 	b.w	8001644 <_malloc_r>
 80015ee:	bf00      	nop
 80015f0:	20000064 	.word	0x20000064

080015f4 <free>:
 80015f4:	4b02      	ldr	r3, [pc, #8]	; (8001600 <free+0xc>)
 80015f6:	4601      	mov	r1, r0
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	f000 ba53 	b.w	8001aa4 <_free_r>
 80015fe:	bf00      	nop
 8001600:	20000064 	.word	0x20000064

08001604 <sbrk_aligned>:
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	4e0e      	ldr	r6, [pc, #56]	; (8001640 <sbrk_aligned+0x3c>)
 8001608:	460c      	mov	r4, r1
 800160a:	6831      	ldr	r1, [r6, #0]
 800160c:	4605      	mov	r5, r0
 800160e:	b911      	cbnz	r1, 8001616 <sbrk_aligned+0x12>
 8001610:	f000 f9f8 	bl	8001a04 <_sbrk_r>
 8001614:	6030      	str	r0, [r6, #0]
 8001616:	4621      	mov	r1, r4
 8001618:	4628      	mov	r0, r5
 800161a:	f000 f9f3 	bl	8001a04 <_sbrk_r>
 800161e:	1c43      	adds	r3, r0, #1
 8001620:	d00a      	beq.n	8001638 <sbrk_aligned+0x34>
 8001622:	1cc4      	adds	r4, r0, #3
 8001624:	f024 0403 	bic.w	r4, r4, #3
 8001628:	42a0      	cmp	r0, r4
 800162a:	d007      	beq.n	800163c <sbrk_aligned+0x38>
 800162c:	1a21      	subs	r1, r4, r0
 800162e:	4628      	mov	r0, r5
 8001630:	f000 f9e8 	bl	8001a04 <_sbrk_r>
 8001634:	3001      	adds	r0, #1
 8001636:	d101      	bne.n	800163c <sbrk_aligned+0x38>
 8001638:	f04f 34ff 	mov.w	r4, #4294967295
 800163c:	4620      	mov	r0, r4
 800163e:	bd70      	pop	{r4, r5, r6, pc}
 8001640:	200000e4 	.word	0x200000e4

08001644 <_malloc_r>:
 8001644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001648:	1ccd      	adds	r5, r1, #3
 800164a:	f025 0503 	bic.w	r5, r5, #3
 800164e:	3508      	adds	r5, #8
 8001650:	2d0c      	cmp	r5, #12
 8001652:	bf38      	it	cc
 8001654:	250c      	movcc	r5, #12
 8001656:	2d00      	cmp	r5, #0
 8001658:	4607      	mov	r7, r0
 800165a:	db01      	blt.n	8001660 <_malloc_r+0x1c>
 800165c:	42a9      	cmp	r1, r5
 800165e:	d905      	bls.n	800166c <_malloc_r+0x28>
 8001660:	230c      	movs	r3, #12
 8001662:	2600      	movs	r6, #0
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	4630      	mov	r0, r6
 8001668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800166c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001740 <_malloc_r+0xfc>
 8001670:	f000 f868 	bl	8001744 <__malloc_lock>
 8001674:	f8d8 3000 	ldr.w	r3, [r8]
 8001678:	461c      	mov	r4, r3
 800167a:	bb5c      	cbnz	r4, 80016d4 <_malloc_r+0x90>
 800167c:	4629      	mov	r1, r5
 800167e:	4638      	mov	r0, r7
 8001680:	f7ff ffc0 	bl	8001604 <sbrk_aligned>
 8001684:	1c43      	adds	r3, r0, #1
 8001686:	4604      	mov	r4, r0
 8001688:	d155      	bne.n	8001736 <_malloc_r+0xf2>
 800168a:	f8d8 4000 	ldr.w	r4, [r8]
 800168e:	4626      	mov	r6, r4
 8001690:	2e00      	cmp	r6, #0
 8001692:	d145      	bne.n	8001720 <_malloc_r+0xdc>
 8001694:	2c00      	cmp	r4, #0
 8001696:	d048      	beq.n	800172a <_malloc_r+0xe6>
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	4631      	mov	r1, r6
 800169c:	4638      	mov	r0, r7
 800169e:	eb04 0903 	add.w	r9, r4, r3
 80016a2:	f000 f9af 	bl	8001a04 <_sbrk_r>
 80016a6:	4581      	cmp	r9, r0
 80016a8:	d13f      	bne.n	800172a <_malloc_r+0xe6>
 80016aa:	6821      	ldr	r1, [r4, #0]
 80016ac:	4638      	mov	r0, r7
 80016ae:	1a6d      	subs	r5, r5, r1
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7ff ffa7 	bl	8001604 <sbrk_aligned>
 80016b6:	3001      	adds	r0, #1
 80016b8:	d037      	beq.n	800172a <_malloc_r+0xe6>
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	442b      	add	r3, r5
 80016be:	6023      	str	r3, [r4, #0]
 80016c0:	f8d8 3000 	ldr.w	r3, [r8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d038      	beq.n	800173a <_malloc_r+0xf6>
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	42a2      	cmp	r2, r4
 80016cc:	d12b      	bne.n	8001726 <_malloc_r+0xe2>
 80016ce:	2200      	movs	r2, #0
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	e00f      	b.n	80016f4 <_malloc_r+0xb0>
 80016d4:	6822      	ldr	r2, [r4, #0]
 80016d6:	1b52      	subs	r2, r2, r5
 80016d8:	d41f      	bmi.n	800171a <_malloc_r+0xd6>
 80016da:	2a0b      	cmp	r2, #11
 80016dc:	d917      	bls.n	800170e <_malloc_r+0xca>
 80016de:	1961      	adds	r1, r4, r5
 80016e0:	42a3      	cmp	r3, r4
 80016e2:	6025      	str	r5, [r4, #0]
 80016e4:	bf18      	it	ne
 80016e6:	6059      	strne	r1, [r3, #4]
 80016e8:	6863      	ldr	r3, [r4, #4]
 80016ea:	bf08      	it	eq
 80016ec:	f8c8 1000 	streq.w	r1, [r8]
 80016f0:	5162      	str	r2, [r4, r5]
 80016f2:	604b      	str	r3, [r1, #4]
 80016f4:	4638      	mov	r0, r7
 80016f6:	f104 060b 	add.w	r6, r4, #11
 80016fa:	f000 f829 	bl	8001750 <__malloc_unlock>
 80016fe:	f026 0607 	bic.w	r6, r6, #7
 8001702:	1d23      	adds	r3, r4, #4
 8001704:	1af2      	subs	r2, r6, r3
 8001706:	d0ae      	beq.n	8001666 <_malloc_r+0x22>
 8001708:	1b9b      	subs	r3, r3, r6
 800170a:	50a3      	str	r3, [r4, r2]
 800170c:	e7ab      	b.n	8001666 <_malloc_r+0x22>
 800170e:	42a3      	cmp	r3, r4
 8001710:	6862      	ldr	r2, [r4, #4]
 8001712:	d1dd      	bne.n	80016d0 <_malloc_r+0x8c>
 8001714:	f8c8 2000 	str.w	r2, [r8]
 8001718:	e7ec      	b.n	80016f4 <_malloc_r+0xb0>
 800171a:	4623      	mov	r3, r4
 800171c:	6864      	ldr	r4, [r4, #4]
 800171e:	e7ac      	b.n	800167a <_malloc_r+0x36>
 8001720:	4634      	mov	r4, r6
 8001722:	6876      	ldr	r6, [r6, #4]
 8001724:	e7b4      	b.n	8001690 <_malloc_r+0x4c>
 8001726:	4613      	mov	r3, r2
 8001728:	e7cc      	b.n	80016c4 <_malloc_r+0x80>
 800172a:	230c      	movs	r3, #12
 800172c:	4638      	mov	r0, r7
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	f000 f80e 	bl	8001750 <__malloc_unlock>
 8001734:	e797      	b.n	8001666 <_malloc_r+0x22>
 8001736:	6025      	str	r5, [r4, #0]
 8001738:	e7dc      	b.n	80016f4 <_malloc_r+0xb0>
 800173a:	605b      	str	r3, [r3, #4]
 800173c:	deff      	udf	#255	; 0xff
 800173e:	bf00      	nop
 8001740:	200000e0 	.word	0x200000e0

08001744 <__malloc_lock>:
 8001744:	4801      	ldr	r0, [pc, #4]	; (800174c <__malloc_lock+0x8>)
 8001746:	f000 b9aa 	b.w	8001a9e <__retarget_lock_acquire_recursive>
 800174a:	bf00      	nop
 800174c:	20000228 	.word	0x20000228

08001750 <__malloc_unlock>:
 8001750:	4801      	ldr	r0, [pc, #4]	; (8001758 <__malloc_unlock+0x8>)
 8001752:	f000 b9a5 	b.w	8001aa0 <__retarget_lock_release_recursive>
 8001756:	bf00      	nop
 8001758:	20000228 	.word	0x20000228

0800175c <std>:
 800175c:	2300      	movs	r3, #0
 800175e:	b510      	push	{r4, lr}
 8001760:	4604      	mov	r4, r0
 8001762:	e9c0 3300 	strd	r3, r3, [r0]
 8001766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800176a:	6083      	str	r3, [r0, #8]
 800176c:	8181      	strh	r1, [r0, #12]
 800176e:	6643      	str	r3, [r0, #100]	; 0x64
 8001770:	81c2      	strh	r2, [r0, #14]
 8001772:	6183      	str	r3, [r0, #24]
 8001774:	4619      	mov	r1, r3
 8001776:	2208      	movs	r2, #8
 8001778:	305c      	adds	r0, #92	; 0x5c
 800177a:	f000 f906 	bl	800198a <memset>
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <std+0x58>)
 8001780:	6224      	str	r4, [r4, #32]
 8001782:	6263      	str	r3, [r4, #36]	; 0x24
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <std+0x5c>)
 8001786:	62a3      	str	r3, [r4, #40]	; 0x28
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <std+0x60>)
 800178a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <std+0x64>)
 800178e:	6323      	str	r3, [r4, #48]	; 0x30
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <std+0x68>)
 8001792:	429c      	cmp	r4, r3
 8001794:	d006      	beq.n	80017a4 <std+0x48>
 8001796:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800179a:	4294      	cmp	r4, r2
 800179c:	d002      	beq.n	80017a4 <std+0x48>
 800179e:	33d0      	adds	r3, #208	; 0xd0
 80017a0:	429c      	cmp	r4, r3
 80017a2:	d105      	bne.n	80017b0 <std+0x54>
 80017a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80017a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017ac:	f000 b976 	b.w	8001a9c <__retarget_lock_init_recursive>
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	bf00      	nop
 80017b4:	08001905 	.word	0x08001905
 80017b8:	08001927 	.word	0x08001927
 80017bc:	0800195f 	.word	0x0800195f
 80017c0:	08001983 	.word	0x08001983
 80017c4:	200000e8 	.word	0x200000e8

080017c8 <stdio_exit_handler>:
 80017c8:	4a02      	ldr	r2, [pc, #8]	; (80017d4 <stdio_exit_handler+0xc>)
 80017ca:	4903      	ldr	r1, [pc, #12]	; (80017d8 <stdio_exit_handler+0x10>)
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <stdio_exit_handler+0x14>)
 80017ce:	f000 b869 	b.w	80018a4 <_fwalk_sglue>
 80017d2:	bf00      	nop
 80017d4:	2000000c 	.word	0x2000000c
 80017d8:	080021e5 	.word	0x080021e5
 80017dc:	20000018 	.word	0x20000018

080017e0 <cleanup_stdio>:
 80017e0:	6841      	ldr	r1, [r0, #4]
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <cleanup_stdio+0x34>)
 80017e4:	b510      	push	{r4, lr}
 80017e6:	4299      	cmp	r1, r3
 80017e8:	4604      	mov	r4, r0
 80017ea:	d001      	beq.n	80017f0 <cleanup_stdio+0x10>
 80017ec:	f000 fcfa 	bl	80021e4 <_fflush_r>
 80017f0:	68a1      	ldr	r1, [r4, #8]
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <cleanup_stdio+0x38>)
 80017f4:	4299      	cmp	r1, r3
 80017f6:	d002      	beq.n	80017fe <cleanup_stdio+0x1e>
 80017f8:	4620      	mov	r0, r4
 80017fa:	f000 fcf3 	bl	80021e4 <_fflush_r>
 80017fe:	68e1      	ldr	r1, [r4, #12]
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <cleanup_stdio+0x3c>)
 8001802:	4299      	cmp	r1, r3
 8001804:	d004      	beq.n	8001810 <cleanup_stdio+0x30>
 8001806:	4620      	mov	r0, r4
 8001808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800180c:	f000 bcea 	b.w	80021e4 <_fflush_r>
 8001810:	bd10      	pop	{r4, pc}
 8001812:	bf00      	nop
 8001814:	200000e8 	.word	0x200000e8
 8001818:	20000150 	.word	0x20000150
 800181c:	200001b8 	.word	0x200001b8

08001820 <global_stdio_init.part.0>:
 8001820:	b510      	push	{r4, lr}
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <global_stdio_init.part.0+0x30>)
 8001824:	4c0b      	ldr	r4, [pc, #44]	; (8001854 <global_stdio_init.part.0+0x34>)
 8001826:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <global_stdio_init.part.0+0x38>)
 8001828:	4620      	mov	r0, r4
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	2104      	movs	r1, #4
 800182e:	2200      	movs	r2, #0
 8001830:	f7ff ff94 	bl	800175c <std>
 8001834:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001838:	2201      	movs	r2, #1
 800183a:	2109      	movs	r1, #9
 800183c:	f7ff ff8e 	bl	800175c <std>
 8001840:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001844:	2202      	movs	r2, #2
 8001846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800184a:	2112      	movs	r1, #18
 800184c:	f7ff bf86 	b.w	800175c <std>
 8001850:	20000220 	.word	0x20000220
 8001854:	200000e8 	.word	0x200000e8
 8001858:	080017c9 	.word	0x080017c9

0800185c <__sfp_lock_acquire>:
 800185c:	4801      	ldr	r0, [pc, #4]	; (8001864 <__sfp_lock_acquire+0x8>)
 800185e:	f000 b91e 	b.w	8001a9e <__retarget_lock_acquire_recursive>
 8001862:	bf00      	nop
 8001864:	20000229 	.word	0x20000229

08001868 <__sfp_lock_release>:
 8001868:	4801      	ldr	r0, [pc, #4]	; (8001870 <__sfp_lock_release+0x8>)
 800186a:	f000 b919 	b.w	8001aa0 <__retarget_lock_release_recursive>
 800186e:	bf00      	nop
 8001870:	20000229 	.word	0x20000229

08001874 <__sinit>:
 8001874:	b510      	push	{r4, lr}
 8001876:	4604      	mov	r4, r0
 8001878:	f7ff fff0 	bl	800185c <__sfp_lock_acquire>
 800187c:	6a23      	ldr	r3, [r4, #32]
 800187e:	b11b      	cbz	r3, 8001888 <__sinit+0x14>
 8001880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001884:	f7ff bff0 	b.w	8001868 <__sfp_lock_release>
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <__sinit+0x28>)
 800188a:	6223      	str	r3, [r4, #32]
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <__sinit+0x2c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f5      	bne.n	8001880 <__sinit+0xc>
 8001894:	f7ff ffc4 	bl	8001820 <global_stdio_init.part.0>
 8001898:	e7f2      	b.n	8001880 <__sinit+0xc>
 800189a:	bf00      	nop
 800189c:	080017e1 	.word	0x080017e1
 80018a0:	20000220 	.word	0x20000220

080018a4 <_fwalk_sglue>:
 80018a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018a8:	4607      	mov	r7, r0
 80018aa:	4688      	mov	r8, r1
 80018ac:	4614      	mov	r4, r2
 80018ae:	2600      	movs	r6, #0
 80018b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018b4:	f1b9 0901 	subs.w	r9, r9, #1
 80018b8:	d505      	bpl.n	80018c6 <_fwalk_sglue+0x22>
 80018ba:	6824      	ldr	r4, [r4, #0]
 80018bc:	2c00      	cmp	r4, #0
 80018be:	d1f7      	bne.n	80018b0 <_fwalk_sglue+0xc>
 80018c0:	4630      	mov	r0, r6
 80018c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018c6:	89ab      	ldrh	r3, [r5, #12]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d907      	bls.n	80018dc <_fwalk_sglue+0x38>
 80018cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018d0:	3301      	adds	r3, #1
 80018d2:	d003      	beq.n	80018dc <_fwalk_sglue+0x38>
 80018d4:	4629      	mov	r1, r5
 80018d6:	4638      	mov	r0, r7
 80018d8:	47c0      	blx	r8
 80018da:	4306      	orrs	r6, r0
 80018dc:	3568      	adds	r5, #104	; 0x68
 80018de:	e7e9      	b.n	80018b4 <_fwalk_sglue+0x10>

080018e0 <iprintf>:
 80018e0:	b40f      	push	{r0, r1, r2, r3}
 80018e2:	b507      	push	{r0, r1, r2, lr}
 80018e4:	4906      	ldr	r1, [pc, #24]	; (8001900 <iprintf+0x20>)
 80018e6:	ab04      	add	r3, sp, #16
 80018e8:	6808      	ldr	r0, [r1, #0]
 80018ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80018ee:	6881      	ldr	r1, [r0, #8]
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	f000 f947 	bl	8001b84 <_vfiprintf_r>
 80018f6:	b003      	add	sp, #12
 80018f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80018fc:	b004      	add	sp, #16
 80018fe:	4770      	bx	lr
 8001900:	20000064 	.word	0x20000064

08001904 <__sread>:
 8001904:	b510      	push	{r4, lr}
 8001906:	460c      	mov	r4, r1
 8001908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800190c:	f000 f868 	bl	80019e0 <_read_r>
 8001910:	2800      	cmp	r0, #0
 8001912:	bfab      	itete	ge
 8001914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001916:	89a3      	ldrhlt	r3, [r4, #12]
 8001918:	181b      	addge	r3, r3, r0
 800191a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800191e:	bfac      	ite	ge
 8001920:	6563      	strge	r3, [r4, #84]	; 0x54
 8001922:	81a3      	strhlt	r3, [r4, #12]
 8001924:	bd10      	pop	{r4, pc}

08001926 <__swrite>:
 8001926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800192a:	461f      	mov	r7, r3
 800192c:	898b      	ldrh	r3, [r1, #12]
 800192e:	4605      	mov	r5, r0
 8001930:	05db      	lsls	r3, r3, #23
 8001932:	460c      	mov	r4, r1
 8001934:	4616      	mov	r6, r2
 8001936:	d505      	bpl.n	8001944 <__swrite+0x1e>
 8001938:	2302      	movs	r3, #2
 800193a:	2200      	movs	r2, #0
 800193c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001940:	f000 f83c 	bl	80019bc <_lseek_r>
 8001944:	89a3      	ldrh	r3, [r4, #12]
 8001946:	4632      	mov	r2, r6
 8001948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800194c:	81a3      	strh	r3, [r4, #12]
 800194e:	4628      	mov	r0, r5
 8001950:	463b      	mov	r3, r7
 8001952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800195a:	f000 b863 	b.w	8001a24 <_write_r>

0800195e <__sseek>:
 800195e:	b510      	push	{r4, lr}
 8001960:	460c      	mov	r4, r1
 8001962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001966:	f000 f829 	bl	80019bc <_lseek_r>
 800196a:	1c43      	adds	r3, r0, #1
 800196c:	89a3      	ldrh	r3, [r4, #12]
 800196e:	bf15      	itete	ne
 8001970:	6560      	strne	r0, [r4, #84]	; 0x54
 8001972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800197a:	81a3      	strheq	r3, [r4, #12]
 800197c:	bf18      	it	ne
 800197e:	81a3      	strhne	r3, [r4, #12]
 8001980:	bd10      	pop	{r4, pc}

08001982 <__sclose>:
 8001982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001986:	f000 b809 	b.w	800199c <_close_r>

0800198a <memset>:
 800198a:	4603      	mov	r3, r0
 800198c:	4402      	add	r2, r0
 800198e:	4293      	cmp	r3, r2
 8001990:	d100      	bne.n	8001994 <memset+0xa>
 8001992:	4770      	bx	lr
 8001994:	f803 1b01 	strb.w	r1, [r3], #1
 8001998:	e7f9      	b.n	800198e <memset+0x4>
	...

0800199c <_close_r>:
 800199c:	b538      	push	{r3, r4, r5, lr}
 800199e:	2300      	movs	r3, #0
 80019a0:	4d05      	ldr	r5, [pc, #20]	; (80019b8 <_close_r+0x1c>)
 80019a2:	4604      	mov	r4, r0
 80019a4:	4608      	mov	r0, r1
 80019a6:	602b      	str	r3, [r5, #0]
 80019a8:	f7ff fd67 	bl	800147a <_close>
 80019ac:	1c43      	adds	r3, r0, #1
 80019ae:	d102      	bne.n	80019b6 <_close_r+0x1a>
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	b103      	cbz	r3, 80019b6 <_close_r+0x1a>
 80019b4:	6023      	str	r3, [r4, #0]
 80019b6:	bd38      	pop	{r3, r4, r5, pc}
 80019b8:	20000224 	.word	0x20000224

080019bc <_lseek_r>:
 80019bc:	b538      	push	{r3, r4, r5, lr}
 80019be:	4604      	mov	r4, r0
 80019c0:	4608      	mov	r0, r1
 80019c2:	4611      	mov	r1, r2
 80019c4:	2200      	movs	r2, #0
 80019c6:	4d05      	ldr	r5, [pc, #20]	; (80019dc <_lseek_r+0x20>)
 80019c8:	602a      	str	r2, [r5, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f7ff fd79 	bl	80014c2 <_lseek>
 80019d0:	1c43      	adds	r3, r0, #1
 80019d2:	d102      	bne.n	80019da <_lseek_r+0x1e>
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	b103      	cbz	r3, 80019da <_lseek_r+0x1e>
 80019d8:	6023      	str	r3, [r4, #0]
 80019da:	bd38      	pop	{r3, r4, r5, pc}
 80019dc:	20000224 	.word	0x20000224

080019e0 <_read_r>:
 80019e0:	b538      	push	{r3, r4, r5, lr}
 80019e2:	4604      	mov	r4, r0
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	2200      	movs	r2, #0
 80019ea:	4d05      	ldr	r5, [pc, #20]	; (8001a00 <_read_r+0x20>)
 80019ec:	602a      	str	r2, [r5, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f7ff fd0a 	bl	8001408 <_read>
 80019f4:	1c43      	adds	r3, r0, #1
 80019f6:	d102      	bne.n	80019fe <_read_r+0x1e>
 80019f8:	682b      	ldr	r3, [r5, #0]
 80019fa:	b103      	cbz	r3, 80019fe <_read_r+0x1e>
 80019fc:	6023      	str	r3, [r4, #0]
 80019fe:	bd38      	pop	{r3, r4, r5, pc}
 8001a00:	20000224 	.word	0x20000224

08001a04 <_sbrk_r>:
 8001a04:	b538      	push	{r3, r4, r5, lr}
 8001a06:	2300      	movs	r3, #0
 8001a08:	4d05      	ldr	r5, [pc, #20]	; (8001a20 <_sbrk_r+0x1c>)
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	602b      	str	r3, [r5, #0]
 8001a10:	f7ff fd64 	bl	80014dc <_sbrk>
 8001a14:	1c43      	adds	r3, r0, #1
 8001a16:	d102      	bne.n	8001a1e <_sbrk_r+0x1a>
 8001a18:	682b      	ldr	r3, [r5, #0]
 8001a1a:	b103      	cbz	r3, 8001a1e <_sbrk_r+0x1a>
 8001a1c:	6023      	str	r3, [r4, #0]
 8001a1e:	bd38      	pop	{r3, r4, r5, pc}
 8001a20:	20000224 	.word	0x20000224

08001a24 <_write_r>:
 8001a24:	b538      	push	{r3, r4, r5, lr}
 8001a26:	4604      	mov	r4, r0
 8001a28:	4608      	mov	r0, r1
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4d05      	ldr	r5, [pc, #20]	; (8001a44 <_write_r+0x20>)
 8001a30:	602a      	str	r2, [r5, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	f7ff fd05 	bl	8001442 <_write>
 8001a38:	1c43      	adds	r3, r0, #1
 8001a3a:	d102      	bne.n	8001a42 <_write_r+0x1e>
 8001a3c:	682b      	ldr	r3, [r5, #0]
 8001a3e:	b103      	cbz	r3, 8001a42 <_write_r+0x1e>
 8001a40:	6023      	str	r3, [r4, #0]
 8001a42:	bd38      	pop	{r3, r4, r5, pc}
 8001a44:	20000224 	.word	0x20000224

08001a48 <__errno>:
 8001a48:	4b01      	ldr	r3, [pc, #4]	; (8001a50 <__errno+0x8>)
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000064 	.word	0x20000064

08001a54 <__libc_init_array>:
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	2600      	movs	r6, #0
 8001a58:	4d0c      	ldr	r5, [pc, #48]	; (8001a8c <__libc_init_array+0x38>)
 8001a5a:	4c0d      	ldr	r4, [pc, #52]	; (8001a90 <__libc_init_array+0x3c>)
 8001a5c:	1b64      	subs	r4, r4, r5
 8001a5e:	10a4      	asrs	r4, r4, #2
 8001a60:	42a6      	cmp	r6, r4
 8001a62:	d109      	bne.n	8001a78 <__libc_init_array+0x24>
 8001a64:	f000 fd0e 	bl	8002484 <_init>
 8001a68:	2600      	movs	r6, #0
 8001a6a:	4d0a      	ldr	r5, [pc, #40]	; (8001a94 <__libc_init_array+0x40>)
 8001a6c:	4c0a      	ldr	r4, [pc, #40]	; (8001a98 <__libc_init_array+0x44>)
 8001a6e:	1b64      	subs	r4, r4, r5
 8001a70:	10a4      	asrs	r4, r4, #2
 8001a72:	42a6      	cmp	r6, r4
 8001a74:	d105      	bne.n	8001a82 <__libc_init_array+0x2e>
 8001a76:	bd70      	pop	{r4, r5, r6, pc}
 8001a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a7c:	4798      	blx	r3
 8001a7e:	3601      	adds	r6, #1
 8001a80:	e7ee      	b.n	8001a60 <__libc_init_array+0xc>
 8001a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a86:	4798      	blx	r3
 8001a88:	3601      	adds	r6, #1
 8001a8a:	e7f2      	b.n	8001a72 <__libc_init_array+0x1e>
 8001a8c:	080025b8 	.word	0x080025b8
 8001a90:	080025b8 	.word	0x080025b8
 8001a94:	080025b8 	.word	0x080025b8
 8001a98:	080025bc 	.word	0x080025bc

08001a9c <__retarget_lock_init_recursive>:
 8001a9c:	4770      	bx	lr

08001a9e <__retarget_lock_acquire_recursive>:
 8001a9e:	4770      	bx	lr

08001aa0 <__retarget_lock_release_recursive>:
 8001aa0:	4770      	bx	lr
	...

08001aa4 <_free_r>:
 8001aa4:	b538      	push	{r3, r4, r5, lr}
 8001aa6:	4605      	mov	r5, r0
 8001aa8:	2900      	cmp	r1, #0
 8001aaa:	d040      	beq.n	8001b2e <_free_r+0x8a>
 8001aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ab0:	1f0c      	subs	r4, r1, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bfb8      	it	lt
 8001ab6:	18e4      	addlt	r4, r4, r3
 8001ab8:	f7ff fe44 	bl	8001744 <__malloc_lock>
 8001abc:	4a1c      	ldr	r2, [pc, #112]	; (8001b30 <_free_r+0x8c>)
 8001abe:	6813      	ldr	r3, [r2, #0]
 8001ac0:	b933      	cbnz	r3, 8001ad0 <_free_r+0x2c>
 8001ac2:	6063      	str	r3, [r4, #4]
 8001ac4:	6014      	str	r4, [r2, #0]
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001acc:	f7ff be40 	b.w	8001750 <__malloc_unlock>
 8001ad0:	42a3      	cmp	r3, r4
 8001ad2:	d908      	bls.n	8001ae6 <_free_r+0x42>
 8001ad4:	6820      	ldr	r0, [r4, #0]
 8001ad6:	1821      	adds	r1, r4, r0
 8001ad8:	428b      	cmp	r3, r1
 8001ada:	bf01      	itttt	eq
 8001adc:	6819      	ldreq	r1, [r3, #0]
 8001ade:	685b      	ldreq	r3, [r3, #4]
 8001ae0:	1809      	addeq	r1, r1, r0
 8001ae2:	6021      	streq	r1, [r4, #0]
 8001ae4:	e7ed      	b.n	8001ac2 <_free_r+0x1e>
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	b10b      	cbz	r3, 8001af0 <_free_r+0x4c>
 8001aec:	42a3      	cmp	r3, r4
 8001aee:	d9fa      	bls.n	8001ae6 <_free_r+0x42>
 8001af0:	6811      	ldr	r1, [r2, #0]
 8001af2:	1850      	adds	r0, r2, r1
 8001af4:	42a0      	cmp	r0, r4
 8001af6:	d10b      	bne.n	8001b10 <_free_r+0x6c>
 8001af8:	6820      	ldr	r0, [r4, #0]
 8001afa:	4401      	add	r1, r0
 8001afc:	1850      	adds	r0, r2, r1
 8001afe:	4283      	cmp	r3, r0
 8001b00:	6011      	str	r1, [r2, #0]
 8001b02:	d1e0      	bne.n	8001ac6 <_free_r+0x22>
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4408      	add	r0, r1
 8001b0a:	6010      	str	r0, [r2, #0]
 8001b0c:	6053      	str	r3, [r2, #4]
 8001b0e:	e7da      	b.n	8001ac6 <_free_r+0x22>
 8001b10:	d902      	bls.n	8001b18 <_free_r+0x74>
 8001b12:	230c      	movs	r3, #12
 8001b14:	602b      	str	r3, [r5, #0]
 8001b16:	e7d6      	b.n	8001ac6 <_free_r+0x22>
 8001b18:	6820      	ldr	r0, [r4, #0]
 8001b1a:	1821      	adds	r1, r4, r0
 8001b1c:	428b      	cmp	r3, r1
 8001b1e:	bf01      	itttt	eq
 8001b20:	6819      	ldreq	r1, [r3, #0]
 8001b22:	685b      	ldreq	r3, [r3, #4]
 8001b24:	1809      	addeq	r1, r1, r0
 8001b26:	6021      	streq	r1, [r4, #0]
 8001b28:	6063      	str	r3, [r4, #4]
 8001b2a:	6054      	str	r4, [r2, #4]
 8001b2c:	e7cb      	b.n	8001ac6 <_free_r+0x22>
 8001b2e:	bd38      	pop	{r3, r4, r5, pc}
 8001b30:	200000e0 	.word	0x200000e0

08001b34 <__sfputc_r>:
 8001b34:	6893      	ldr	r3, [r2, #8]
 8001b36:	b410      	push	{r4}
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	6093      	str	r3, [r2, #8]
 8001b3e:	da07      	bge.n	8001b50 <__sfputc_r+0x1c>
 8001b40:	6994      	ldr	r4, [r2, #24]
 8001b42:	42a3      	cmp	r3, r4
 8001b44:	db01      	blt.n	8001b4a <__sfputc_r+0x16>
 8001b46:	290a      	cmp	r1, #10
 8001b48:	d102      	bne.n	8001b50 <__sfputc_r+0x1c>
 8001b4a:	bc10      	pop	{r4}
 8001b4c:	f000 bb72 	b.w	8002234 <__swbuf_r>
 8001b50:	6813      	ldr	r3, [r2, #0]
 8001b52:	1c58      	adds	r0, r3, #1
 8001b54:	6010      	str	r0, [r2, #0]
 8001b56:	7019      	strb	r1, [r3, #0]
 8001b58:	4608      	mov	r0, r1
 8001b5a:	bc10      	pop	{r4}
 8001b5c:	4770      	bx	lr

08001b5e <__sfputs_r>:
 8001b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b60:	4606      	mov	r6, r0
 8001b62:	460f      	mov	r7, r1
 8001b64:	4614      	mov	r4, r2
 8001b66:	18d5      	adds	r5, r2, r3
 8001b68:	42ac      	cmp	r4, r5
 8001b6a:	d101      	bne.n	8001b70 <__sfputs_r+0x12>
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	e007      	b.n	8001b80 <__sfputs_r+0x22>
 8001b70:	463a      	mov	r2, r7
 8001b72:	4630      	mov	r0, r6
 8001b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b78:	f7ff ffdc 	bl	8001b34 <__sfputc_r>
 8001b7c:	1c43      	adds	r3, r0, #1
 8001b7e:	d1f3      	bne.n	8001b68 <__sfputs_r+0xa>
 8001b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b84 <_vfiprintf_r>:
 8001b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b88:	460d      	mov	r5, r1
 8001b8a:	4614      	mov	r4, r2
 8001b8c:	4698      	mov	r8, r3
 8001b8e:	4606      	mov	r6, r0
 8001b90:	b09d      	sub	sp, #116	; 0x74
 8001b92:	b118      	cbz	r0, 8001b9c <_vfiprintf_r+0x18>
 8001b94:	6a03      	ldr	r3, [r0, #32]
 8001b96:	b90b      	cbnz	r3, 8001b9c <_vfiprintf_r+0x18>
 8001b98:	f7ff fe6c 	bl	8001874 <__sinit>
 8001b9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b9e:	07d9      	lsls	r1, r3, #31
 8001ba0:	d405      	bmi.n	8001bae <_vfiprintf_r+0x2a>
 8001ba2:	89ab      	ldrh	r3, [r5, #12]
 8001ba4:	059a      	lsls	r2, r3, #22
 8001ba6:	d402      	bmi.n	8001bae <_vfiprintf_r+0x2a>
 8001ba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001baa:	f7ff ff78 	bl	8001a9e <__retarget_lock_acquire_recursive>
 8001bae:	89ab      	ldrh	r3, [r5, #12]
 8001bb0:	071b      	lsls	r3, r3, #28
 8001bb2:	d501      	bpl.n	8001bb8 <_vfiprintf_r+0x34>
 8001bb4:	692b      	ldr	r3, [r5, #16]
 8001bb6:	b99b      	cbnz	r3, 8001be0 <_vfiprintf_r+0x5c>
 8001bb8:	4629      	mov	r1, r5
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f000 fb78 	bl	80022b0 <__swsetup_r>
 8001bc0:	b170      	cbz	r0, 8001be0 <_vfiprintf_r+0x5c>
 8001bc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001bc4:	07dc      	lsls	r4, r3, #31
 8001bc6:	d504      	bpl.n	8001bd2 <_vfiprintf_r+0x4e>
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	b01d      	add	sp, #116	; 0x74
 8001bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bd2:	89ab      	ldrh	r3, [r5, #12]
 8001bd4:	0598      	lsls	r0, r3, #22
 8001bd6:	d4f7      	bmi.n	8001bc8 <_vfiprintf_r+0x44>
 8001bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bda:	f7ff ff61 	bl	8001aa0 <__retarget_lock_release_recursive>
 8001bde:	e7f3      	b.n	8001bc8 <_vfiprintf_r+0x44>
 8001be0:	2300      	movs	r3, #0
 8001be2:	9309      	str	r3, [sp, #36]	; 0x24
 8001be4:	2320      	movs	r3, #32
 8001be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001bea:	2330      	movs	r3, #48	; 0x30
 8001bec:	f04f 0901 	mov.w	r9, #1
 8001bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8001bf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001da4 <_vfiprintf_r+0x220>
 8001bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	469a      	mov	sl, r3
 8001c00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c04:	b10a      	cbz	r2, 8001c0a <_vfiprintf_r+0x86>
 8001c06:	2a25      	cmp	r2, #37	; 0x25
 8001c08:	d1f9      	bne.n	8001bfe <_vfiprintf_r+0x7a>
 8001c0a:	ebba 0b04 	subs.w	fp, sl, r4
 8001c0e:	d00b      	beq.n	8001c28 <_vfiprintf_r+0xa4>
 8001c10:	465b      	mov	r3, fp
 8001c12:	4622      	mov	r2, r4
 8001c14:	4629      	mov	r1, r5
 8001c16:	4630      	mov	r0, r6
 8001c18:	f7ff ffa1 	bl	8001b5e <__sfputs_r>
 8001c1c:	3001      	adds	r0, #1
 8001c1e:	f000 80a9 	beq.w	8001d74 <_vfiprintf_r+0x1f0>
 8001c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c24:	445a      	add	r2, fp
 8001c26:	9209      	str	r2, [sp, #36]	; 0x24
 8001c28:	f89a 3000 	ldrb.w	r3, [sl]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a1 	beq.w	8001d74 <_vfiprintf_r+0x1f0>
 8001c32:	2300      	movs	r3, #0
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c3c:	f10a 0a01 	add.w	sl, sl, #1
 8001c40:	9304      	str	r3, [sp, #16]
 8001c42:	9307      	str	r3, [sp, #28]
 8001c44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c48:	931a      	str	r3, [sp, #104]	; 0x68
 8001c4a:	4654      	mov	r4, sl
 8001c4c:	2205      	movs	r2, #5
 8001c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c52:	4854      	ldr	r0, [pc, #336]	; (8001da4 <_vfiprintf_r+0x220>)
 8001c54:	f000 fb84 	bl	8002360 <memchr>
 8001c58:	9a04      	ldr	r2, [sp, #16]
 8001c5a:	b9d8      	cbnz	r0, 8001c94 <_vfiprintf_r+0x110>
 8001c5c:	06d1      	lsls	r1, r2, #27
 8001c5e:	bf44      	itt	mi
 8001c60:	2320      	movmi	r3, #32
 8001c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c66:	0713      	lsls	r3, r2, #28
 8001c68:	bf44      	itt	mi
 8001c6a:	232b      	movmi	r3, #43	; 0x2b
 8001c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c70:	f89a 3000 	ldrb.w	r3, [sl]
 8001c74:	2b2a      	cmp	r3, #42	; 0x2a
 8001c76:	d015      	beq.n	8001ca4 <_vfiprintf_r+0x120>
 8001c78:	4654      	mov	r4, sl
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f04f 0c0a 	mov.w	ip, #10
 8001c80:	9a07      	ldr	r2, [sp, #28]
 8001c82:	4621      	mov	r1, r4
 8001c84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c88:	3b30      	subs	r3, #48	; 0x30
 8001c8a:	2b09      	cmp	r3, #9
 8001c8c:	d94d      	bls.n	8001d2a <_vfiprintf_r+0x1a6>
 8001c8e:	b1b0      	cbz	r0, 8001cbe <_vfiprintf_r+0x13a>
 8001c90:	9207      	str	r2, [sp, #28]
 8001c92:	e014      	b.n	8001cbe <_vfiprintf_r+0x13a>
 8001c94:	eba0 0308 	sub.w	r3, r0, r8
 8001c98:	fa09 f303 	lsl.w	r3, r9, r3
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	46a2      	mov	sl, r4
 8001ca0:	9304      	str	r3, [sp, #16]
 8001ca2:	e7d2      	b.n	8001c4a <_vfiprintf_r+0xc6>
 8001ca4:	9b03      	ldr	r3, [sp, #12]
 8001ca6:	1d19      	adds	r1, r3, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	9103      	str	r1, [sp, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bfbb      	ittet	lt
 8001cb0:	425b      	neglt	r3, r3
 8001cb2:	f042 0202 	orrlt.w	r2, r2, #2
 8001cb6:	9307      	strge	r3, [sp, #28]
 8001cb8:	9307      	strlt	r3, [sp, #28]
 8001cba:	bfb8      	it	lt
 8001cbc:	9204      	strlt	r2, [sp, #16]
 8001cbe:	7823      	ldrb	r3, [r4, #0]
 8001cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8001cc2:	d10c      	bne.n	8001cde <_vfiprintf_r+0x15a>
 8001cc4:	7863      	ldrb	r3, [r4, #1]
 8001cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8001cc8:	d134      	bne.n	8001d34 <_vfiprintf_r+0x1b0>
 8001cca:	9b03      	ldr	r3, [sp, #12]
 8001ccc:	3402      	adds	r4, #2
 8001cce:	1d1a      	adds	r2, r3, #4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	9203      	str	r2, [sp, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bfb8      	it	lt
 8001cd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8001cdc:	9305      	str	r3, [sp, #20]
 8001cde:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001da8 <_vfiprintf_r+0x224>
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	4650      	mov	r0, sl
 8001ce6:	7821      	ldrb	r1, [r4, #0]
 8001ce8:	f000 fb3a 	bl	8002360 <memchr>
 8001cec:	b138      	cbz	r0, 8001cfe <_vfiprintf_r+0x17a>
 8001cee:	2240      	movs	r2, #64	; 0x40
 8001cf0:	9b04      	ldr	r3, [sp, #16]
 8001cf2:	eba0 000a 	sub.w	r0, r0, sl
 8001cf6:	4082      	lsls	r2, r0
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	3401      	adds	r4, #1
 8001cfc:	9304      	str	r3, [sp, #16]
 8001cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d02:	2206      	movs	r2, #6
 8001d04:	4829      	ldr	r0, [pc, #164]	; (8001dac <_vfiprintf_r+0x228>)
 8001d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d0a:	f000 fb29 	bl	8002360 <memchr>
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	d03f      	beq.n	8001d92 <_vfiprintf_r+0x20e>
 8001d12:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <_vfiprintf_r+0x22c>)
 8001d14:	bb1b      	cbnz	r3, 8001d5e <_vfiprintf_r+0x1da>
 8001d16:	9b03      	ldr	r3, [sp, #12]
 8001d18:	3307      	adds	r3, #7
 8001d1a:	f023 0307 	bic.w	r3, r3, #7
 8001d1e:	3308      	adds	r3, #8
 8001d20:	9303      	str	r3, [sp, #12]
 8001d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d24:	443b      	add	r3, r7
 8001d26:	9309      	str	r3, [sp, #36]	; 0x24
 8001d28:	e768      	b.n	8001bfc <_vfiprintf_r+0x78>
 8001d2a:	460c      	mov	r4, r1
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d32:	e7a6      	b.n	8001c82 <_vfiprintf_r+0xfe>
 8001d34:	2300      	movs	r3, #0
 8001d36:	f04f 0c0a 	mov.w	ip, #10
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	3401      	adds	r4, #1
 8001d3e:	9305      	str	r3, [sp, #20]
 8001d40:	4620      	mov	r0, r4
 8001d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d46:	3a30      	subs	r2, #48	; 0x30
 8001d48:	2a09      	cmp	r2, #9
 8001d4a:	d903      	bls.n	8001d54 <_vfiprintf_r+0x1d0>
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0c6      	beq.n	8001cde <_vfiprintf_r+0x15a>
 8001d50:	9105      	str	r1, [sp, #20]
 8001d52:	e7c4      	b.n	8001cde <_vfiprintf_r+0x15a>
 8001d54:	4604      	mov	r4, r0
 8001d56:	2301      	movs	r3, #1
 8001d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d5c:	e7f0      	b.n	8001d40 <_vfiprintf_r+0x1bc>
 8001d5e:	ab03      	add	r3, sp, #12
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	462a      	mov	r2, r5
 8001d64:	4630      	mov	r0, r6
 8001d66:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <_vfiprintf_r+0x230>)
 8001d68:	a904      	add	r1, sp, #16
 8001d6a:	f3af 8000 	nop.w
 8001d6e:	4607      	mov	r7, r0
 8001d70:	1c78      	adds	r0, r7, #1
 8001d72:	d1d6      	bne.n	8001d22 <_vfiprintf_r+0x19e>
 8001d74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d76:	07d9      	lsls	r1, r3, #31
 8001d78:	d405      	bmi.n	8001d86 <_vfiprintf_r+0x202>
 8001d7a:	89ab      	ldrh	r3, [r5, #12]
 8001d7c:	059a      	lsls	r2, r3, #22
 8001d7e:	d402      	bmi.n	8001d86 <_vfiprintf_r+0x202>
 8001d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d82:	f7ff fe8d 	bl	8001aa0 <__retarget_lock_release_recursive>
 8001d86:	89ab      	ldrh	r3, [r5, #12]
 8001d88:	065b      	lsls	r3, r3, #25
 8001d8a:	f53f af1d 	bmi.w	8001bc8 <_vfiprintf_r+0x44>
 8001d8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d90:	e71c      	b.n	8001bcc <_vfiprintf_r+0x48>
 8001d92:	ab03      	add	r3, sp, #12
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	462a      	mov	r2, r5
 8001d98:	4630      	mov	r0, r6
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <_vfiprintf_r+0x230>)
 8001d9c:	a904      	add	r1, sp, #16
 8001d9e:	f000 f87d 	bl	8001e9c <_printf_i>
 8001da2:	e7e4      	b.n	8001d6e <_vfiprintf_r+0x1ea>
 8001da4:	08002582 	.word	0x08002582
 8001da8:	08002588 	.word	0x08002588
 8001dac:	0800258c 	.word	0x0800258c
 8001db0:	00000000 	.word	0x00000000
 8001db4:	08001b5f 	.word	0x08001b5f

08001db8 <_printf_common>:
 8001db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dbc:	4616      	mov	r6, r2
 8001dbe:	4699      	mov	r9, r3
 8001dc0:	688a      	ldr	r2, [r1, #8]
 8001dc2:	690b      	ldr	r3, [r1, #16]
 8001dc4:	4607      	mov	r7, r0
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	bfb8      	it	lt
 8001dca:	4613      	movlt	r3, r2
 8001dcc:	6033      	str	r3, [r6, #0]
 8001dce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001dd2:	460c      	mov	r4, r1
 8001dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001dd8:	b10a      	cbz	r2, 8001dde <_printf_common+0x26>
 8001dda:	3301      	adds	r3, #1
 8001ddc:	6033      	str	r3, [r6, #0]
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	0699      	lsls	r1, r3, #26
 8001de2:	bf42      	ittt	mi
 8001de4:	6833      	ldrmi	r3, [r6, #0]
 8001de6:	3302      	addmi	r3, #2
 8001de8:	6033      	strmi	r3, [r6, #0]
 8001dea:	6825      	ldr	r5, [r4, #0]
 8001dec:	f015 0506 	ands.w	r5, r5, #6
 8001df0:	d106      	bne.n	8001e00 <_printf_common+0x48>
 8001df2:	f104 0a19 	add.w	sl, r4, #25
 8001df6:	68e3      	ldr	r3, [r4, #12]
 8001df8:	6832      	ldr	r2, [r6, #0]
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	42ab      	cmp	r3, r5
 8001dfe:	dc2b      	bgt.n	8001e58 <_printf_common+0xa0>
 8001e00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e04:	1e13      	subs	r3, r2, #0
 8001e06:	6822      	ldr	r2, [r4, #0]
 8001e08:	bf18      	it	ne
 8001e0a:	2301      	movne	r3, #1
 8001e0c:	0692      	lsls	r2, r2, #26
 8001e0e:	d430      	bmi.n	8001e72 <_printf_common+0xba>
 8001e10:	4649      	mov	r1, r9
 8001e12:	4638      	mov	r0, r7
 8001e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e18:	47c0      	blx	r8
 8001e1a:	3001      	adds	r0, #1
 8001e1c:	d023      	beq.n	8001e66 <_printf_common+0xae>
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	6922      	ldr	r2, [r4, #16]
 8001e22:	f003 0306 	and.w	r3, r3, #6
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	bf14      	ite	ne
 8001e2a:	2500      	movne	r5, #0
 8001e2c:	6833      	ldreq	r3, [r6, #0]
 8001e2e:	f04f 0600 	mov.w	r6, #0
 8001e32:	bf08      	it	eq
 8001e34:	68e5      	ldreq	r5, [r4, #12]
 8001e36:	f104 041a 	add.w	r4, r4, #26
 8001e3a:	bf08      	it	eq
 8001e3c:	1aed      	subeq	r5, r5, r3
 8001e3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001e42:	bf08      	it	eq
 8001e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	bfc4      	itt	gt
 8001e4c:	1a9b      	subgt	r3, r3, r2
 8001e4e:	18ed      	addgt	r5, r5, r3
 8001e50:	42b5      	cmp	r5, r6
 8001e52:	d11a      	bne.n	8001e8a <_printf_common+0xd2>
 8001e54:	2000      	movs	r0, #0
 8001e56:	e008      	b.n	8001e6a <_printf_common+0xb2>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	4652      	mov	r2, sl
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	4638      	mov	r0, r7
 8001e60:	47c0      	blx	r8
 8001e62:	3001      	adds	r0, #1
 8001e64:	d103      	bne.n	8001e6e <_printf_common+0xb6>
 8001e66:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e6e:	3501      	adds	r5, #1
 8001e70:	e7c1      	b.n	8001df6 <_printf_common+0x3e>
 8001e72:	2030      	movs	r0, #48	; 0x30
 8001e74:	18e1      	adds	r1, r4, r3
 8001e76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e7a:	1c5a      	adds	r2, r3, #1
 8001e7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e80:	4422      	add	r2, r4
 8001e82:	3302      	adds	r3, #2
 8001e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e88:	e7c2      	b.n	8001e10 <_printf_common+0x58>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	4649      	mov	r1, r9
 8001e90:	4638      	mov	r0, r7
 8001e92:	47c0      	blx	r8
 8001e94:	3001      	adds	r0, #1
 8001e96:	d0e6      	beq.n	8001e66 <_printf_common+0xae>
 8001e98:	3601      	adds	r6, #1
 8001e9a:	e7d9      	b.n	8001e50 <_printf_common+0x98>

08001e9c <_printf_i>:
 8001e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ea0:	7e0f      	ldrb	r7, [r1, #24]
 8001ea2:	4691      	mov	r9, r2
 8001ea4:	2f78      	cmp	r7, #120	; 0x78
 8001ea6:	4680      	mov	r8, r0
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	469a      	mov	sl, r3
 8001eac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001eae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001eb2:	d807      	bhi.n	8001ec4 <_printf_i+0x28>
 8001eb4:	2f62      	cmp	r7, #98	; 0x62
 8001eb6:	d80a      	bhi.n	8001ece <_printf_i+0x32>
 8001eb8:	2f00      	cmp	r7, #0
 8001eba:	f000 80d5 	beq.w	8002068 <_printf_i+0x1cc>
 8001ebe:	2f58      	cmp	r7, #88	; 0x58
 8001ec0:	f000 80c1 	beq.w	8002046 <_printf_i+0x1aa>
 8001ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ec8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001ecc:	e03a      	b.n	8001f44 <_printf_i+0xa8>
 8001ece:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001ed2:	2b15      	cmp	r3, #21
 8001ed4:	d8f6      	bhi.n	8001ec4 <_printf_i+0x28>
 8001ed6:	a101      	add	r1, pc, #4	; (adr r1, 8001edc <_printf_i+0x40>)
 8001ed8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001edc:	08001f35 	.word	0x08001f35
 8001ee0:	08001f49 	.word	0x08001f49
 8001ee4:	08001ec5 	.word	0x08001ec5
 8001ee8:	08001ec5 	.word	0x08001ec5
 8001eec:	08001ec5 	.word	0x08001ec5
 8001ef0:	08001ec5 	.word	0x08001ec5
 8001ef4:	08001f49 	.word	0x08001f49
 8001ef8:	08001ec5 	.word	0x08001ec5
 8001efc:	08001ec5 	.word	0x08001ec5
 8001f00:	08001ec5 	.word	0x08001ec5
 8001f04:	08001ec5 	.word	0x08001ec5
 8001f08:	0800204f 	.word	0x0800204f
 8001f0c:	08001f75 	.word	0x08001f75
 8001f10:	08002009 	.word	0x08002009
 8001f14:	08001ec5 	.word	0x08001ec5
 8001f18:	08001ec5 	.word	0x08001ec5
 8001f1c:	08002071 	.word	0x08002071
 8001f20:	08001ec5 	.word	0x08001ec5
 8001f24:	08001f75 	.word	0x08001f75
 8001f28:	08001ec5 	.word	0x08001ec5
 8001f2c:	08001ec5 	.word	0x08001ec5
 8001f30:	08002011 	.word	0x08002011
 8001f34:	682b      	ldr	r3, [r5, #0]
 8001f36:	1d1a      	adds	r2, r3, #4
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	602a      	str	r2, [r5, #0]
 8001f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0a0      	b.n	800208a <_printf_i+0x1ee>
 8001f48:	6820      	ldr	r0, [r4, #0]
 8001f4a:	682b      	ldr	r3, [r5, #0]
 8001f4c:	0607      	lsls	r7, r0, #24
 8001f4e:	f103 0104 	add.w	r1, r3, #4
 8001f52:	6029      	str	r1, [r5, #0]
 8001f54:	d501      	bpl.n	8001f5a <_printf_i+0xbe>
 8001f56:	681e      	ldr	r6, [r3, #0]
 8001f58:	e003      	b.n	8001f62 <_printf_i+0xc6>
 8001f5a:	0646      	lsls	r6, r0, #25
 8001f5c:	d5fb      	bpl.n	8001f56 <_printf_i+0xba>
 8001f5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001f62:	2e00      	cmp	r6, #0
 8001f64:	da03      	bge.n	8001f6e <_printf_i+0xd2>
 8001f66:	232d      	movs	r3, #45	; 0x2d
 8001f68:	4276      	negs	r6, r6
 8001f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f6e:	230a      	movs	r3, #10
 8001f70:	4859      	ldr	r0, [pc, #356]	; (80020d8 <_printf_i+0x23c>)
 8001f72:	e012      	b.n	8001f9a <_printf_i+0xfe>
 8001f74:	682b      	ldr	r3, [r5, #0]
 8001f76:	6820      	ldr	r0, [r4, #0]
 8001f78:	1d19      	adds	r1, r3, #4
 8001f7a:	6029      	str	r1, [r5, #0]
 8001f7c:	0605      	lsls	r5, r0, #24
 8001f7e:	d501      	bpl.n	8001f84 <_printf_i+0xe8>
 8001f80:	681e      	ldr	r6, [r3, #0]
 8001f82:	e002      	b.n	8001f8a <_printf_i+0xee>
 8001f84:	0641      	lsls	r1, r0, #25
 8001f86:	d5fb      	bpl.n	8001f80 <_printf_i+0xe4>
 8001f88:	881e      	ldrh	r6, [r3, #0]
 8001f8a:	2f6f      	cmp	r7, #111	; 0x6f
 8001f8c:	bf0c      	ite	eq
 8001f8e:	2308      	moveq	r3, #8
 8001f90:	230a      	movne	r3, #10
 8001f92:	4851      	ldr	r0, [pc, #324]	; (80020d8 <_printf_i+0x23c>)
 8001f94:	2100      	movs	r1, #0
 8001f96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f9a:	6865      	ldr	r5, [r4, #4]
 8001f9c:	2d00      	cmp	r5, #0
 8001f9e:	bfa8      	it	ge
 8001fa0:	6821      	ldrge	r1, [r4, #0]
 8001fa2:	60a5      	str	r5, [r4, #8]
 8001fa4:	bfa4      	itt	ge
 8001fa6:	f021 0104 	bicge.w	r1, r1, #4
 8001faa:	6021      	strge	r1, [r4, #0]
 8001fac:	b90e      	cbnz	r6, 8001fb2 <_printf_i+0x116>
 8001fae:	2d00      	cmp	r5, #0
 8001fb0:	d04b      	beq.n	800204a <_printf_i+0x1ae>
 8001fb2:	4615      	mov	r5, r2
 8001fb4:	fbb6 f1f3 	udiv	r1, r6, r3
 8001fb8:	fb03 6711 	mls	r7, r3, r1, r6
 8001fbc:	5dc7      	ldrb	r7, [r0, r7]
 8001fbe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001fc2:	4637      	mov	r7, r6
 8001fc4:	42bb      	cmp	r3, r7
 8001fc6:	460e      	mov	r6, r1
 8001fc8:	d9f4      	bls.n	8001fb4 <_printf_i+0x118>
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d10b      	bne.n	8001fe6 <_printf_i+0x14a>
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	07de      	lsls	r6, r3, #31
 8001fd2:	d508      	bpl.n	8001fe6 <_printf_i+0x14a>
 8001fd4:	6923      	ldr	r3, [r4, #16]
 8001fd6:	6861      	ldr	r1, [r4, #4]
 8001fd8:	4299      	cmp	r1, r3
 8001fda:	bfde      	ittt	le
 8001fdc:	2330      	movle	r3, #48	; 0x30
 8001fde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001fe2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001fe6:	1b52      	subs	r2, r2, r5
 8001fe8:	6122      	str	r2, [r4, #16]
 8001fea:	464b      	mov	r3, r9
 8001fec:	4621      	mov	r1, r4
 8001fee:	4640      	mov	r0, r8
 8001ff0:	f8cd a000 	str.w	sl, [sp]
 8001ff4:	aa03      	add	r2, sp, #12
 8001ff6:	f7ff fedf 	bl	8001db8 <_printf_common>
 8001ffa:	3001      	adds	r0, #1
 8001ffc:	d14a      	bne.n	8002094 <_printf_i+0x1f8>
 8001ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8002002:	b004      	add	sp, #16
 8002004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	f043 0320 	orr.w	r3, r3, #32
 800200e:	6023      	str	r3, [r4, #0]
 8002010:	2778      	movs	r7, #120	; 0x78
 8002012:	4832      	ldr	r0, [pc, #200]	; (80020dc <_printf_i+0x240>)
 8002014:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	6829      	ldr	r1, [r5, #0]
 800201c:	061f      	lsls	r7, r3, #24
 800201e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002022:	d402      	bmi.n	800202a <_printf_i+0x18e>
 8002024:	065f      	lsls	r7, r3, #25
 8002026:	bf48      	it	mi
 8002028:	b2b6      	uxthmi	r6, r6
 800202a:	07df      	lsls	r7, r3, #31
 800202c:	bf48      	it	mi
 800202e:	f043 0320 	orrmi.w	r3, r3, #32
 8002032:	6029      	str	r1, [r5, #0]
 8002034:	bf48      	it	mi
 8002036:	6023      	strmi	r3, [r4, #0]
 8002038:	b91e      	cbnz	r6, 8002042 <_printf_i+0x1a6>
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	f023 0320 	bic.w	r3, r3, #32
 8002040:	6023      	str	r3, [r4, #0]
 8002042:	2310      	movs	r3, #16
 8002044:	e7a6      	b.n	8001f94 <_printf_i+0xf8>
 8002046:	4824      	ldr	r0, [pc, #144]	; (80020d8 <_printf_i+0x23c>)
 8002048:	e7e4      	b.n	8002014 <_printf_i+0x178>
 800204a:	4615      	mov	r5, r2
 800204c:	e7bd      	b.n	8001fca <_printf_i+0x12e>
 800204e:	682b      	ldr	r3, [r5, #0]
 8002050:	6826      	ldr	r6, [r4, #0]
 8002052:	1d18      	adds	r0, r3, #4
 8002054:	6961      	ldr	r1, [r4, #20]
 8002056:	6028      	str	r0, [r5, #0]
 8002058:	0635      	lsls	r5, r6, #24
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	d501      	bpl.n	8002062 <_printf_i+0x1c6>
 800205e:	6019      	str	r1, [r3, #0]
 8002060:	e002      	b.n	8002068 <_printf_i+0x1cc>
 8002062:	0670      	lsls	r0, r6, #25
 8002064:	d5fb      	bpl.n	800205e <_printf_i+0x1c2>
 8002066:	8019      	strh	r1, [r3, #0]
 8002068:	2300      	movs	r3, #0
 800206a:	4615      	mov	r5, r2
 800206c:	6123      	str	r3, [r4, #16]
 800206e:	e7bc      	b.n	8001fea <_printf_i+0x14e>
 8002070:	682b      	ldr	r3, [r5, #0]
 8002072:	2100      	movs	r1, #0
 8002074:	1d1a      	adds	r2, r3, #4
 8002076:	602a      	str	r2, [r5, #0]
 8002078:	681d      	ldr	r5, [r3, #0]
 800207a:	6862      	ldr	r2, [r4, #4]
 800207c:	4628      	mov	r0, r5
 800207e:	f000 f96f 	bl	8002360 <memchr>
 8002082:	b108      	cbz	r0, 8002088 <_printf_i+0x1ec>
 8002084:	1b40      	subs	r0, r0, r5
 8002086:	6060      	str	r0, [r4, #4]
 8002088:	6863      	ldr	r3, [r4, #4]
 800208a:	6123      	str	r3, [r4, #16]
 800208c:	2300      	movs	r3, #0
 800208e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002092:	e7aa      	b.n	8001fea <_printf_i+0x14e>
 8002094:	462a      	mov	r2, r5
 8002096:	4649      	mov	r1, r9
 8002098:	4640      	mov	r0, r8
 800209a:	6923      	ldr	r3, [r4, #16]
 800209c:	47d0      	blx	sl
 800209e:	3001      	adds	r0, #1
 80020a0:	d0ad      	beq.n	8001ffe <_printf_i+0x162>
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	079b      	lsls	r3, r3, #30
 80020a6:	d413      	bmi.n	80020d0 <_printf_i+0x234>
 80020a8:	68e0      	ldr	r0, [r4, #12]
 80020aa:	9b03      	ldr	r3, [sp, #12]
 80020ac:	4298      	cmp	r0, r3
 80020ae:	bfb8      	it	lt
 80020b0:	4618      	movlt	r0, r3
 80020b2:	e7a6      	b.n	8002002 <_printf_i+0x166>
 80020b4:	2301      	movs	r3, #1
 80020b6:	4632      	mov	r2, r6
 80020b8:	4649      	mov	r1, r9
 80020ba:	4640      	mov	r0, r8
 80020bc:	47d0      	blx	sl
 80020be:	3001      	adds	r0, #1
 80020c0:	d09d      	beq.n	8001ffe <_printf_i+0x162>
 80020c2:	3501      	adds	r5, #1
 80020c4:	68e3      	ldr	r3, [r4, #12]
 80020c6:	9903      	ldr	r1, [sp, #12]
 80020c8:	1a5b      	subs	r3, r3, r1
 80020ca:	42ab      	cmp	r3, r5
 80020cc:	dcf2      	bgt.n	80020b4 <_printf_i+0x218>
 80020ce:	e7eb      	b.n	80020a8 <_printf_i+0x20c>
 80020d0:	2500      	movs	r5, #0
 80020d2:	f104 0619 	add.w	r6, r4, #25
 80020d6:	e7f5      	b.n	80020c4 <_printf_i+0x228>
 80020d8:	08002593 	.word	0x08002593
 80020dc:	080025a4 	.word	0x080025a4

080020e0 <__sflush_r>:
 80020e0:	898a      	ldrh	r2, [r1, #12]
 80020e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e4:	4605      	mov	r5, r0
 80020e6:	0710      	lsls	r0, r2, #28
 80020e8:	460c      	mov	r4, r1
 80020ea:	d457      	bmi.n	800219c <__sflush_r+0xbc>
 80020ec:	684b      	ldr	r3, [r1, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	dc04      	bgt.n	80020fc <__sflush_r+0x1c>
 80020f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	dc01      	bgt.n	80020fc <__sflush_r+0x1c>
 80020f8:	2000      	movs	r0, #0
 80020fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020fe:	2e00      	cmp	r6, #0
 8002100:	d0fa      	beq.n	80020f8 <__sflush_r+0x18>
 8002102:	2300      	movs	r3, #0
 8002104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002108:	682f      	ldr	r7, [r5, #0]
 800210a:	6a21      	ldr	r1, [r4, #32]
 800210c:	602b      	str	r3, [r5, #0]
 800210e:	d032      	beq.n	8002176 <__sflush_r+0x96>
 8002110:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002112:	89a3      	ldrh	r3, [r4, #12]
 8002114:	075a      	lsls	r2, r3, #29
 8002116:	d505      	bpl.n	8002124 <__sflush_r+0x44>
 8002118:	6863      	ldr	r3, [r4, #4]
 800211a:	1ac0      	subs	r0, r0, r3
 800211c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800211e:	b10b      	cbz	r3, 8002124 <__sflush_r+0x44>
 8002120:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002122:	1ac0      	subs	r0, r0, r3
 8002124:	2300      	movs	r3, #0
 8002126:	4602      	mov	r2, r0
 8002128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800212a:	4628      	mov	r0, r5
 800212c:	6a21      	ldr	r1, [r4, #32]
 800212e:	47b0      	blx	r6
 8002130:	1c43      	adds	r3, r0, #1
 8002132:	89a3      	ldrh	r3, [r4, #12]
 8002134:	d106      	bne.n	8002144 <__sflush_r+0x64>
 8002136:	6829      	ldr	r1, [r5, #0]
 8002138:	291d      	cmp	r1, #29
 800213a:	d82b      	bhi.n	8002194 <__sflush_r+0xb4>
 800213c:	4a28      	ldr	r2, [pc, #160]	; (80021e0 <__sflush_r+0x100>)
 800213e:	410a      	asrs	r2, r1
 8002140:	07d6      	lsls	r6, r2, #31
 8002142:	d427      	bmi.n	8002194 <__sflush_r+0xb4>
 8002144:	2200      	movs	r2, #0
 8002146:	6062      	str	r2, [r4, #4]
 8002148:	6922      	ldr	r2, [r4, #16]
 800214a:	04d9      	lsls	r1, r3, #19
 800214c:	6022      	str	r2, [r4, #0]
 800214e:	d504      	bpl.n	800215a <__sflush_r+0x7a>
 8002150:	1c42      	adds	r2, r0, #1
 8002152:	d101      	bne.n	8002158 <__sflush_r+0x78>
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	b903      	cbnz	r3, 800215a <__sflush_r+0x7a>
 8002158:	6560      	str	r0, [r4, #84]	; 0x54
 800215a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800215c:	602f      	str	r7, [r5, #0]
 800215e:	2900      	cmp	r1, #0
 8002160:	d0ca      	beq.n	80020f8 <__sflush_r+0x18>
 8002162:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002166:	4299      	cmp	r1, r3
 8002168:	d002      	beq.n	8002170 <__sflush_r+0x90>
 800216a:	4628      	mov	r0, r5
 800216c:	f7ff fc9a 	bl	8001aa4 <_free_r>
 8002170:	2000      	movs	r0, #0
 8002172:	6360      	str	r0, [r4, #52]	; 0x34
 8002174:	e7c1      	b.n	80020fa <__sflush_r+0x1a>
 8002176:	2301      	movs	r3, #1
 8002178:	4628      	mov	r0, r5
 800217a:	47b0      	blx	r6
 800217c:	1c41      	adds	r1, r0, #1
 800217e:	d1c8      	bne.n	8002112 <__sflush_r+0x32>
 8002180:	682b      	ldr	r3, [r5, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0c5      	beq.n	8002112 <__sflush_r+0x32>
 8002186:	2b1d      	cmp	r3, #29
 8002188:	d001      	beq.n	800218e <__sflush_r+0xae>
 800218a:	2b16      	cmp	r3, #22
 800218c:	d101      	bne.n	8002192 <__sflush_r+0xb2>
 800218e:	602f      	str	r7, [r5, #0]
 8002190:	e7b2      	b.n	80020f8 <__sflush_r+0x18>
 8002192:	89a3      	ldrh	r3, [r4, #12]
 8002194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002198:	81a3      	strh	r3, [r4, #12]
 800219a:	e7ae      	b.n	80020fa <__sflush_r+0x1a>
 800219c:	690f      	ldr	r7, [r1, #16]
 800219e:	2f00      	cmp	r7, #0
 80021a0:	d0aa      	beq.n	80020f8 <__sflush_r+0x18>
 80021a2:	0793      	lsls	r3, r2, #30
 80021a4:	bf18      	it	ne
 80021a6:	2300      	movne	r3, #0
 80021a8:	680e      	ldr	r6, [r1, #0]
 80021aa:	bf08      	it	eq
 80021ac:	694b      	ldreq	r3, [r1, #20]
 80021ae:	1bf6      	subs	r6, r6, r7
 80021b0:	600f      	str	r7, [r1, #0]
 80021b2:	608b      	str	r3, [r1, #8]
 80021b4:	2e00      	cmp	r6, #0
 80021b6:	dd9f      	ble.n	80020f8 <__sflush_r+0x18>
 80021b8:	4633      	mov	r3, r6
 80021ba:	463a      	mov	r2, r7
 80021bc:	4628      	mov	r0, r5
 80021be:	6a21      	ldr	r1, [r4, #32]
 80021c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80021c4:	47e0      	blx	ip
 80021c6:	2800      	cmp	r0, #0
 80021c8:	dc06      	bgt.n	80021d8 <__sflush_r+0xf8>
 80021ca:	89a3      	ldrh	r3, [r4, #12]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d4:	81a3      	strh	r3, [r4, #12]
 80021d6:	e790      	b.n	80020fa <__sflush_r+0x1a>
 80021d8:	4407      	add	r7, r0
 80021da:	1a36      	subs	r6, r6, r0
 80021dc:	e7ea      	b.n	80021b4 <__sflush_r+0xd4>
 80021de:	bf00      	nop
 80021e0:	dfbffffe 	.word	0xdfbffffe

080021e4 <_fflush_r>:
 80021e4:	b538      	push	{r3, r4, r5, lr}
 80021e6:	690b      	ldr	r3, [r1, #16]
 80021e8:	4605      	mov	r5, r0
 80021ea:	460c      	mov	r4, r1
 80021ec:	b913      	cbnz	r3, 80021f4 <_fflush_r+0x10>
 80021ee:	2500      	movs	r5, #0
 80021f0:	4628      	mov	r0, r5
 80021f2:	bd38      	pop	{r3, r4, r5, pc}
 80021f4:	b118      	cbz	r0, 80021fe <_fflush_r+0x1a>
 80021f6:	6a03      	ldr	r3, [r0, #32]
 80021f8:	b90b      	cbnz	r3, 80021fe <_fflush_r+0x1a>
 80021fa:	f7ff fb3b 	bl	8001874 <__sinit>
 80021fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f3      	beq.n	80021ee <_fflush_r+0xa>
 8002206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002208:	07d0      	lsls	r0, r2, #31
 800220a:	d404      	bmi.n	8002216 <_fflush_r+0x32>
 800220c:	0599      	lsls	r1, r3, #22
 800220e:	d402      	bmi.n	8002216 <_fflush_r+0x32>
 8002210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002212:	f7ff fc44 	bl	8001a9e <__retarget_lock_acquire_recursive>
 8002216:	4628      	mov	r0, r5
 8002218:	4621      	mov	r1, r4
 800221a:	f7ff ff61 	bl	80020e0 <__sflush_r>
 800221e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002220:	4605      	mov	r5, r0
 8002222:	07da      	lsls	r2, r3, #31
 8002224:	d4e4      	bmi.n	80021f0 <_fflush_r+0xc>
 8002226:	89a3      	ldrh	r3, [r4, #12]
 8002228:	059b      	lsls	r3, r3, #22
 800222a:	d4e1      	bmi.n	80021f0 <_fflush_r+0xc>
 800222c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800222e:	f7ff fc37 	bl	8001aa0 <__retarget_lock_release_recursive>
 8002232:	e7dd      	b.n	80021f0 <_fflush_r+0xc>

08002234 <__swbuf_r>:
 8002234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002236:	460e      	mov	r6, r1
 8002238:	4614      	mov	r4, r2
 800223a:	4605      	mov	r5, r0
 800223c:	b118      	cbz	r0, 8002246 <__swbuf_r+0x12>
 800223e:	6a03      	ldr	r3, [r0, #32]
 8002240:	b90b      	cbnz	r3, 8002246 <__swbuf_r+0x12>
 8002242:	f7ff fb17 	bl	8001874 <__sinit>
 8002246:	69a3      	ldr	r3, [r4, #24]
 8002248:	60a3      	str	r3, [r4, #8]
 800224a:	89a3      	ldrh	r3, [r4, #12]
 800224c:	071a      	lsls	r2, r3, #28
 800224e:	d525      	bpl.n	800229c <__swbuf_r+0x68>
 8002250:	6923      	ldr	r3, [r4, #16]
 8002252:	b31b      	cbz	r3, 800229c <__swbuf_r+0x68>
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	6922      	ldr	r2, [r4, #16]
 8002258:	b2f6      	uxtb	r6, r6
 800225a:	1a98      	subs	r0, r3, r2
 800225c:	6963      	ldr	r3, [r4, #20]
 800225e:	4637      	mov	r7, r6
 8002260:	4283      	cmp	r3, r0
 8002262:	dc04      	bgt.n	800226e <__swbuf_r+0x3a>
 8002264:	4621      	mov	r1, r4
 8002266:	4628      	mov	r0, r5
 8002268:	f7ff ffbc 	bl	80021e4 <_fflush_r>
 800226c:	b9e0      	cbnz	r0, 80022a8 <__swbuf_r+0x74>
 800226e:	68a3      	ldr	r3, [r4, #8]
 8002270:	3b01      	subs	r3, #1
 8002272:	60a3      	str	r3, [r4, #8]
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	6022      	str	r2, [r4, #0]
 800227a:	701e      	strb	r6, [r3, #0]
 800227c:	6962      	ldr	r2, [r4, #20]
 800227e:	1c43      	adds	r3, r0, #1
 8002280:	429a      	cmp	r2, r3
 8002282:	d004      	beq.n	800228e <__swbuf_r+0x5a>
 8002284:	89a3      	ldrh	r3, [r4, #12]
 8002286:	07db      	lsls	r3, r3, #31
 8002288:	d506      	bpl.n	8002298 <__swbuf_r+0x64>
 800228a:	2e0a      	cmp	r6, #10
 800228c:	d104      	bne.n	8002298 <__swbuf_r+0x64>
 800228e:	4621      	mov	r1, r4
 8002290:	4628      	mov	r0, r5
 8002292:	f7ff ffa7 	bl	80021e4 <_fflush_r>
 8002296:	b938      	cbnz	r0, 80022a8 <__swbuf_r+0x74>
 8002298:	4638      	mov	r0, r7
 800229a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800229c:	4621      	mov	r1, r4
 800229e:	4628      	mov	r0, r5
 80022a0:	f000 f806 	bl	80022b0 <__swsetup_r>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	d0d5      	beq.n	8002254 <__swbuf_r+0x20>
 80022a8:	f04f 37ff 	mov.w	r7, #4294967295
 80022ac:	e7f4      	b.n	8002298 <__swbuf_r+0x64>
	...

080022b0 <__swsetup_r>:
 80022b0:	b538      	push	{r3, r4, r5, lr}
 80022b2:	4b2a      	ldr	r3, [pc, #168]	; (800235c <__swsetup_r+0xac>)
 80022b4:	4605      	mov	r5, r0
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	460c      	mov	r4, r1
 80022ba:	b118      	cbz	r0, 80022c4 <__swsetup_r+0x14>
 80022bc:	6a03      	ldr	r3, [r0, #32]
 80022be:	b90b      	cbnz	r3, 80022c4 <__swsetup_r+0x14>
 80022c0:	f7ff fad8 	bl	8001874 <__sinit>
 80022c4:	89a3      	ldrh	r3, [r4, #12]
 80022c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022ca:	0718      	lsls	r0, r3, #28
 80022cc:	d422      	bmi.n	8002314 <__swsetup_r+0x64>
 80022ce:	06d9      	lsls	r1, r3, #27
 80022d0:	d407      	bmi.n	80022e2 <__swsetup_r+0x32>
 80022d2:	2309      	movs	r3, #9
 80022d4:	602b      	str	r3, [r5, #0]
 80022d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80022da:	f04f 30ff 	mov.w	r0, #4294967295
 80022de:	81a3      	strh	r3, [r4, #12]
 80022e0:	e034      	b.n	800234c <__swsetup_r+0x9c>
 80022e2:	0758      	lsls	r0, r3, #29
 80022e4:	d512      	bpl.n	800230c <__swsetup_r+0x5c>
 80022e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022e8:	b141      	cbz	r1, 80022fc <__swsetup_r+0x4c>
 80022ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022ee:	4299      	cmp	r1, r3
 80022f0:	d002      	beq.n	80022f8 <__swsetup_r+0x48>
 80022f2:	4628      	mov	r0, r5
 80022f4:	f7ff fbd6 	bl	8001aa4 <_free_r>
 80022f8:	2300      	movs	r3, #0
 80022fa:	6363      	str	r3, [r4, #52]	; 0x34
 80022fc:	89a3      	ldrh	r3, [r4, #12]
 80022fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002302:	81a3      	strh	r3, [r4, #12]
 8002304:	2300      	movs	r3, #0
 8002306:	6063      	str	r3, [r4, #4]
 8002308:	6923      	ldr	r3, [r4, #16]
 800230a:	6023      	str	r3, [r4, #0]
 800230c:	89a3      	ldrh	r3, [r4, #12]
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	81a3      	strh	r3, [r4, #12]
 8002314:	6923      	ldr	r3, [r4, #16]
 8002316:	b94b      	cbnz	r3, 800232c <__swsetup_r+0x7c>
 8002318:	89a3      	ldrh	r3, [r4, #12]
 800231a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800231e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002322:	d003      	beq.n	800232c <__swsetup_r+0x7c>
 8002324:	4621      	mov	r1, r4
 8002326:	4628      	mov	r0, r5
 8002328:	f000 f84d 	bl	80023c6 <__smakebuf_r>
 800232c:	89a0      	ldrh	r0, [r4, #12]
 800232e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002332:	f010 0301 	ands.w	r3, r0, #1
 8002336:	d00a      	beq.n	800234e <__swsetup_r+0x9e>
 8002338:	2300      	movs	r3, #0
 800233a:	60a3      	str	r3, [r4, #8]
 800233c:	6963      	ldr	r3, [r4, #20]
 800233e:	425b      	negs	r3, r3
 8002340:	61a3      	str	r3, [r4, #24]
 8002342:	6923      	ldr	r3, [r4, #16]
 8002344:	b943      	cbnz	r3, 8002358 <__swsetup_r+0xa8>
 8002346:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800234a:	d1c4      	bne.n	80022d6 <__swsetup_r+0x26>
 800234c:	bd38      	pop	{r3, r4, r5, pc}
 800234e:	0781      	lsls	r1, r0, #30
 8002350:	bf58      	it	pl
 8002352:	6963      	ldrpl	r3, [r4, #20]
 8002354:	60a3      	str	r3, [r4, #8]
 8002356:	e7f4      	b.n	8002342 <__swsetup_r+0x92>
 8002358:	2000      	movs	r0, #0
 800235a:	e7f7      	b.n	800234c <__swsetup_r+0x9c>
 800235c:	20000064 	.word	0x20000064

08002360 <memchr>:
 8002360:	4603      	mov	r3, r0
 8002362:	b510      	push	{r4, lr}
 8002364:	b2c9      	uxtb	r1, r1
 8002366:	4402      	add	r2, r0
 8002368:	4293      	cmp	r3, r2
 800236a:	4618      	mov	r0, r3
 800236c:	d101      	bne.n	8002372 <memchr+0x12>
 800236e:	2000      	movs	r0, #0
 8002370:	e003      	b.n	800237a <memchr+0x1a>
 8002372:	7804      	ldrb	r4, [r0, #0]
 8002374:	3301      	adds	r3, #1
 8002376:	428c      	cmp	r4, r1
 8002378:	d1f6      	bne.n	8002368 <memchr+0x8>
 800237a:	bd10      	pop	{r4, pc}

0800237c <__swhatbuf_r>:
 800237c:	b570      	push	{r4, r5, r6, lr}
 800237e:	460c      	mov	r4, r1
 8002380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002384:	4615      	mov	r5, r2
 8002386:	2900      	cmp	r1, #0
 8002388:	461e      	mov	r6, r3
 800238a:	b096      	sub	sp, #88	; 0x58
 800238c:	da0c      	bge.n	80023a8 <__swhatbuf_r+0x2c>
 800238e:	89a3      	ldrh	r3, [r4, #12]
 8002390:	2100      	movs	r1, #0
 8002392:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002396:	bf0c      	ite	eq
 8002398:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800239c:	2340      	movne	r3, #64	; 0x40
 800239e:	2000      	movs	r0, #0
 80023a0:	6031      	str	r1, [r6, #0]
 80023a2:	602b      	str	r3, [r5, #0]
 80023a4:	b016      	add	sp, #88	; 0x58
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
 80023a8:	466a      	mov	r2, sp
 80023aa:	f000 f849 	bl	8002440 <_fstat_r>
 80023ae:	2800      	cmp	r0, #0
 80023b0:	dbed      	blt.n	800238e <__swhatbuf_r+0x12>
 80023b2:	9901      	ldr	r1, [sp, #4]
 80023b4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80023b8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80023bc:	4259      	negs	r1, r3
 80023be:	4159      	adcs	r1, r3
 80023c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c4:	e7eb      	b.n	800239e <__swhatbuf_r+0x22>

080023c6 <__smakebuf_r>:
 80023c6:	898b      	ldrh	r3, [r1, #12]
 80023c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80023ca:	079d      	lsls	r5, r3, #30
 80023cc:	4606      	mov	r6, r0
 80023ce:	460c      	mov	r4, r1
 80023d0:	d507      	bpl.n	80023e2 <__smakebuf_r+0x1c>
 80023d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80023d6:	6023      	str	r3, [r4, #0]
 80023d8:	6123      	str	r3, [r4, #16]
 80023da:	2301      	movs	r3, #1
 80023dc:	6163      	str	r3, [r4, #20]
 80023de:	b002      	add	sp, #8
 80023e0:	bd70      	pop	{r4, r5, r6, pc}
 80023e2:	466a      	mov	r2, sp
 80023e4:	ab01      	add	r3, sp, #4
 80023e6:	f7ff ffc9 	bl	800237c <__swhatbuf_r>
 80023ea:	9900      	ldr	r1, [sp, #0]
 80023ec:	4605      	mov	r5, r0
 80023ee:	4630      	mov	r0, r6
 80023f0:	f7ff f928 	bl	8001644 <_malloc_r>
 80023f4:	b948      	cbnz	r0, 800240a <__smakebuf_r+0x44>
 80023f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023fa:	059a      	lsls	r2, r3, #22
 80023fc:	d4ef      	bmi.n	80023de <__smakebuf_r+0x18>
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	81a3      	strh	r3, [r4, #12]
 8002408:	e7e3      	b.n	80023d2 <__smakebuf_r+0xc>
 800240a:	89a3      	ldrh	r3, [r4, #12]
 800240c:	6020      	str	r0, [r4, #0]
 800240e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002412:	81a3      	strh	r3, [r4, #12]
 8002414:	9b00      	ldr	r3, [sp, #0]
 8002416:	6120      	str	r0, [r4, #16]
 8002418:	6163      	str	r3, [r4, #20]
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	b15b      	cbz	r3, 8002436 <__smakebuf_r+0x70>
 800241e:	4630      	mov	r0, r6
 8002420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002424:	f000 f81e 	bl	8002464 <_isatty_r>
 8002428:	b128      	cbz	r0, 8002436 <__smakebuf_r+0x70>
 800242a:	89a3      	ldrh	r3, [r4, #12]
 800242c:	f023 0303 	bic.w	r3, r3, #3
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	81a3      	strh	r3, [r4, #12]
 8002436:	89a3      	ldrh	r3, [r4, #12]
 8002438:	431d      	orrs	r5, r3
 800243a:	81a5      	strh	r5, [r4, #12]
 800243c:	e7cf      	b.n	80023de <__smakebuf_r+0x18>
	...

08002440 <_fstat_r>:
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	2300      	movs	r3, #0
 8002444:	4d06      	ldr	r5, [pc, #24]	; (8002460 <_fstat_r+0x20>)
 8002446:	4604      	mov	r4, r0
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	602b      	str	r3, [r5, #0]
 800244e:	f7ff f81f 	bl	8001490 <_fstat>
 8002452:	1c43      	adds	r3, r0, #1
 8002454:	d102      	bne.n	800245c <_fstat_r+0x1c>
 8002456:	682b      	ldr	r3, [r5, #0]
 8002458:	b103      	cbz	r3, 800245c <_fstat_r+0x1c>
 800245a:	6023      	str	r3, [r4, #0]
 800245c:	bd38      	pop	{r3, r4, r5, pc}
 800245e:	bf00      	nop
 8002460:	20000224 	.word	0x20000224

08002464 <_isatty_r>:
 8002464:	b538      	push	{r3, r4, r5, lr}
 8002466:	2300      	movs	r3, #0
 8002468:	4d05      	ldr	r5, [pc, #20]	; (8002480 <_isatty_r+0x1c>)
 800246a:	4604      	mov	r4, r0
 800246c:	4608      	mov	r0, r1
 800246e:	602b      	str	r3, [r5, #0]
 8002470:	f7ff f81d 	bl	80014ae <_isatty>
 8002474:	1c43      	adds	r3, r0, #1
 8002476:	d102      	bne.n	800247e <_isatty_r+0x1a>
 8002478:	682b      	ldr	r3, [r5, #0]
 800247a:	b103      	cbz	r3, 800247e <_isatty_r+0x1a>
 800247c:	6023      	str	r3, [r4, #0]
 800247e:	bd38      	pop	{r3, r4, r5, pc}
 8002480:	20000224 	.word	0x20000224

08002484 <_init>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr

08002490 <_fini>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr
